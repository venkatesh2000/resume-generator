[{"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/index.js":"1","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/App.jsx":"2","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/pages/Login/Login.jsx":"3","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Education/Education.jsx":"4","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/pages/Signup/Signup.jsx":"5","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Skills/Skills.jsx":"6","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/PersonalInfo/PersonalInfo.jsx":"7","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/pages/Home/Home.jsx":"8","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Experiences/Experiences.jsx":"9","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Projects/Projects.jsx":"10","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Preview/Preview.jsx":"11","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/NavBar/NavBar.jsx":"12","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Experiences/Experience.jsx":"13","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Projects/Project.jsx":"14","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/NavButtons/NavButtons.jsx":"15","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/pages/Information/Information.jsx":"16","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/NavBar2/NavBar2.jsx":"17","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/HorizontalLinearStepper/HorizontalLinearStepper.jsx":"18"},{"size":223,"mtime":1625393931801,"results":"19","hashOfConfig":"20"},{"size":5593,"mtime":1625398891321,"results":"21","hashOfConfig":"20"},{"size":2257,"mtime":1625398431562,"results":"22","hashOfConfig":"20"},{"size":5436,"mtime":1625393931379,"results":"23","hashOfConfig":"20"},{"size":1724,"mtime":1625398916667,"results":"24","hashOfConfig":"20"},{"size":5628,"mtime":1625393931738,"results":"25","hashOfConfig":"20"},{"size":6402,"mtime":1625393931582,"results":"26","hashOfConfig":"20"},{"size":1496,"mtime":1625399061896,"results":"27","hashOfConfig":"20"},{"size":4236,"mtime":1625393931441,"results":"28","hashOfConfig":"20"},{"size":8652,"mtime":1625393931691,"results":"29","hashOfConfig":"20"},{"size":451,"mtime":1625393931613,"results":"30","hashOfConfig":"20"},{"size":1195,"mtime":1625398793936,"results":"31","hashOfConfig":"20"},{"size":2549,"mtime":1625393931410,"results":"32","hashOfConfig":"20"},{"size":2449,"mtime":1625393931645,"results":"33","hashOfConfig":"20"},{"size":2167,"mtime":1625393931535,"results":"34","hashOfConfig":"20"},{"size":1109,"mtime":1625398480932,"results":"35","hashOfConfig":"20"},{"size":1230,"mtime":1625396803843,"results":"36","hashOfConfig":"20"},{"size":1360,"mtime":1625393931473,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1yrqxyt",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/index.js",[],["80","81"],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/App.jsx",["82"],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/pages/Login/Login.jsx",["83"],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Education/Education.jsx",["84"],"import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NavButtons from \"../NavButtons/NavButtons.jsx\";\r\nimport \"./Education.css\";\r\n\r\nconst Education = (props) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      \"& > *\": {\r\n        marginTop: theme.spacing(3),\r\n        width: \"85%\",\r\n      },\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  const { resume, setResume, step, setStep } = props;\r\n  const [values, setValues] = React.useState({\r\n    college: \"\",\r\n    degree: \"\",\r\n    cgpa: \"\",\r\n    from: \"\",\r\n    to: \"\",\r\n  });\r\n  const [errors, setErrors] = React.useState({\r\n    college: false,\r\n    degree: false,\r\n    cgpa: false,\r\n    from: false,\r\n    to: false,\r\n  });\r\n  const [errorMessages, setErrorMessages] = React.useState({\r\n    college: \"\",\r\n    degree: \"\",\r\n    cgpa: \"\",\r\n    from: \"\",\r\n    to: \"\",\r\n  });\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n\r\n  const onValueChange = (key, event) => {\r\n    values[key] = event.target.value;\r\n    setValues({ ...values });\r\n  };\r\n  const validateInfo = () => {\r\n    setIsValidated(false);\r\n\r\n    const newErrors = {\r\n      name: false,\r\n      email: false,\r\n      pno: false,\r\n      github: false,\r\n      linkedin: false,\r\n      website: false,\r\n    };\r\n    const newErrorMessages = {\r\n      name: \"\",\r\n      email: \"\",\r\n      pno: \"\",\r\n      github: \"\",\r\n      linkedin: \"\",\r\n      website: \"\",\r\n    };\r\n\r\n    if (!values.college.length) {\r\n      newErrors[\"college\"] = true;\r\n      newErrorMessages[\"college\"] = \"This is a required field!\";\r\n    }\r\n    if (!values.degree.length) {\r\n      newErrors[\"degree\"] = true;\r\n      newErrorMessages[\"degree\"] = \"This is a required field!\";\r\n    }\r\n    if (!values.cgpa.length) {\r\n      newErrors[\"cgpa\"] = true;\r\n      newErrorMessages[\"cgpa\"] = \"This is a required field!\";\r\n    }\r\n    if (isNaN(values.cgpa)) {\r\n      newErrors[\"cgpa\"] = true;\r\n      newErrorMessages[\"cgpa\"] = \"Please enter a valid number!\";\r\n    }\r\n    if (!values.from.length) {\r\n      newErrors[\"from\"] = true;\r\n      newErrorMessages[\"from\"] = \"This is a required field!\";\r\n    }\r\n    if (isNaN(values.from)) {\r\n      newErrors[\"from\"] = true;\r\n      newErrorMessages[\"from\"] = \"Please enter a valid number!\";\r\n    }\r\n    if (!values.to.length) {\r\n      newErrors[\"to\"] = true;\r\n      newErrorMessages[\"to\"] = \"This is a required field!\";\r\n    }\r\n    if (isNaN(values.to)) {\r\n      newErrors[\"to\"] = true;\r\n      newErrorMessages[\"to\"] = \"Please enter a valid number!\";\r\n    }\r\n\r\n    setErrors({ ...newErrors });\r\n    setErrorMessages({ ...newErrorMessages });\r\n    setIsValidated(true);\r\n  };\r\n  const handleNext = () => {\r\n    if (!Object.values(errors).includes(true)) {\r\n      setResume({ ...resume, ...values });\r\n      setStep(step + 1);\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    if (isValidated) handleNext();\r\n  });\r\n  const init = () => {\r\n    if (\"college\" in resume) {\r\n      const newValues = {};\r\n      newValues[\"college\"] = resume[\"college\"];\r\n      newValues[\"degree\"] = resume[\"degree\"];\r\n      newValues[\"cgpa\"] = resume[\"cgpa\"];\r\n      newValues[\"from\"] = resume[\"from\"];\r\n      newValues[\"to\"] = resume[\"to\"];\r\n\r\n      setValues({ ...newValues });\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"card\" variant=\"outlined\">\r\n        <CardContent>\r\n          <form className={classes.root} autoComplete=\"on\">\r\n            <TextField\r\n              label=\"College\"\r\n              variant=\"outlined\"\r\n              value={values.college}\r\n              onChange={(event) => onValueChange(\"college\", event)}\r\n              error={errors.college}\r\n              helperText={errors.college && errorMessages.college}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"Degree\"\r\n              variant=\"outlined\"\r\n              value={values.degree}\r\n              onChange={(event) => onValueChange(\"degree\", event)}\r\n              error={errors.degree}\r\n              helperText={errors.degree && errorMessages.degree}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"CGPA\"\r\n              variant=\"outlined\"\r\n              value={values.cgpa}\r\n              onChange={(event) => onValueChange(\"cgpa\", event)}\r\n              error={errors.cgpa}\r\n              helperText={errors.cgpa && errorMessages.cgpa}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"Joining Year\"\r\n              variant=\"outlined\"\r\n              value={values.from}\r\n              onChange={(event) => onValueChange(\"from\", event)}\r\n              error={errors.from}\r\n              helperText={errors.from && errorMessages.from}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"Year of Graduation\"\r\n              variant=\"outlined\"\r\n              value={values.to}\r\n              onChange={(event) => onValueChange(\"to\", event)}\r\n              error={errors.to}\r\n              helperText={errors.to && errorMessages.to}\r\n              required\r\n            />\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n      <NavButtons {...props} validateInfo={validateInfo} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Education;\r\n","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/pages/Signup/Signup.jsx",[],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Skills/Skills.jsx",["85"],"import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NavButtons from \"../NavButtons/NavButtons.jsx\";\r\nimport \"./Skills.css\";\r\n\r\nconst Skills = (props) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      \"& > *\": {\r\n        marginTop: theme.spacing(3),\r\n        width: \"85%\",\r\n      },\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  const { resume, setResume, step, setStep } = props;\r\n  const [values, setValues] = React.useState({\r\n    s1: \"\",\r\n    s2: \"\",\r\n    s3: \"\",\r\n    s4: \"\",\r\n    s5: \"\",\r\n    s6: \"\",\r\n    s7: \"\",\r\n    s8: \"\",\r\n    s9: \"\",\r\n    s10: \"\",\r\n  });\r\n  const [errors, setErrors] = React.useState({\r\n    s1: false,\r\n    s2: false,\r\n    s3: false,\r\n    s4: false,\r\n  });\r\n  const [errorMessages, setErrorMessages] = React.useState({\r\n    s1: \"\",\r\n    s2: \"\",\r\n    s3: \"\",\r\n    s4: \"\",\r\n  });\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n\r\n  const onValueChange = (key, event) => {\r\n    values[key] = event.target.value;\r\n    setValues({ ...values });\r\n  };\r\n  const validateInfo = () => {\r\n    setIsValidated(false);\r\n\r\n    const newErrors = {\r\n      s1: false,\r\n      s2: false,\r\n      s3: false,\r\n      s4: false,\r\n    };\r\n    const newErrorMessages = {\r\n      s1: \"\",\r\n      s2: \"\",\r\n      s3: \"\",\r\n      s4: \"\",\r\n    };\r\n    if (!values.s1.length) {\r\n      newErrors[\"s1\"] = true;\r\n      newErrorMessages[\"s1\"] = \"This is a required field!\";\r\n    }\r\n    if (!values.s2.length) {\r\n      newErrors[\"s2\"] = true;\r\n      newErrorMessages[\"s2\"] = \"This is a required field!\";\r\n    }\r\n    if (!values.s3.length) {\r\n      newErrors[\"s3\"] = true;\r\n      newErrorMessages[\"s3\"] = \"This is a required field!\";\r\n    }\r\n    if (!values.s4.length) {\r\n      newErrors[\"s4\"] = true;\r\n      newErrorMessages[\"s4\"] = \"This is a required field!\";\r\n    }\r\n\r\n    setErrors({ ...newErrors });\r\n    setErrorMessages({ ...newErrorMessages });\r\n    setIsValidated(true);\r\n  };\r\n  const handleNext = () => {\r\n    if (!Object.values(errors).includes(true)) {\r\n      setResume({ ...resume, ...values });\r\n      setStep(step + 1);\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    if (isValidated) handleNext();\r\n  });\r\n  const init = () => {\r\n    if (\"s1\" in resume) {\r\n      const newValues = {};\r\n      for (let i = 1; i <= 10; ++i) {\r\n        newValues[`s${i}`] = resume[`s${i}`];\r\n      }\r\n\r\n      setValues({ ...newValues });\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"card\" variant=\"outlined\">\r\n        <CardContent>\r\n          <form className={classes.root} autoComplete=\"on\">\r\n            <TextField\r\n              label=\"Skill 1\"\r\n              variant=\"outlined\"\r\n              value={values.s1}\r\n              onChange={(event) => onValueChange(\"s1\", event)}\r\n              error={errors.s1}\r\n              helperText={errors.s1 && errorMessages.s1}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"Skill 2\"\r\n              variant=\"outlined\"\r\n              value={values.s2}\r\n              onChange={(event) => onValueChange(\"s2\", event)}\r\n              error={errors.s2}\r\n              helperText={errors.s2 && errorMessages.s2}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"Skill 3\"\r\n              variant=\"outlined\"\r\n              value={values.s3}\r\n              onChange={(event) => onValueChange(\"s3\", event)}\r\n              error={errors.s3}\r\n              helperText={errors.s3 && errorMessages.s3}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"Skill 4\"\r\n              variant=\"outlined\"\r\n              value={values.s4}\r\n              onChange={(event) => onValueChange(\"s4\", event)}\r\n              error={errors.s4}\r\n              helperText={errors.s4 && errorMessages.s4}\r\n              required\r\n            />\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card className=\"card\" variant=\"outlined\">\r\n        <CardContent>\r\n          <form className={classes.root} autoComplete=\"on\">\r\n            <TextField\r\n              label=\"Skill 5\"\r\n              variant=\"outlined\"\r\n              value={values.s5}\r\n              onChange={(event) => onValueChange(\"s5\", event)}\r\n            />\r\n            <TextField\r\n              label=\"Skill 6\"\r\n              variant=\"outlined\"\r\n              value={values.s6}\r\n              onChange={(event) => onValueChange(\"s6\", event)}\r\n            />\r\n            <TextField\r\n              label=\"Skill 7\"\r\n              variant=\"outlined\"\r\n              value={values.s7}\r\n              onChange={(event) => onValueChange(\"s7\", event)}\r\n            />\r\n            <TextField\r\n              label=\"Skill 8\"\r\n              variant=\"outlined\"\r\n              value={values.s8}\r\n              onChange={(event) => onValueChange(\"s8\", event)}\r\n            />\r\n            <TextField\r\n              label=\"Skill 9\"\r\n              variant=\"outlined\"\r\n              value={values.s9}\r\n              onChange={(event) => onValueChange(\"s9\", event)}\r\n            />\r\n            <TextField\r\n              label=\"Skill 10\"\r\n              variant=\"outlined\"\r\n              value={values.s10}\r\n              onChange={(event) => onValueChange(\"s10\", event)}\r\n            />\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <NavButtons {...props} validateInfo={validateInfo} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/PersonalInfo/PersonalInfo.jsx",["86","87","88","89"],"import \"./PersonalInfo.css\";\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NavButtons from \"../NavButtons/NavButtons.jsx\";\r\n\r\nconst PersonalInfo = (props) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      \"& > *\": {\r\n        marginTop: theme.spacing(3),\r\n        width: \"85%\",\r\n      },\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  const { resume, setResume, step, setStep } = props;\r\n  const [values, setValues] = React.useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    pno: \"\",\r\n    github: \"\",\r\n    linkedin: \"\",\r\n    website: \"\",\r\n  });\r\n  const [errors, setErrors] = React.useState({\r\n    name: false,\r\n    email: false,\r\n    pno: false,\r\n    github: false,\r\n    linkedin: false,\r\n    website: false,\r\n  });\r\n  const [errorMessages, setErrorMessages] = React.useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    pno: \"\",\r\n    github: \"\",\r\n    linkedin: \"\",\r\n    website: \"\",\r\n  });\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n\r\n  const onValueChange = (key, event) => {\r\n    values[key] = event.target.value;\r\n    setValues({ ...values });\r\n  };\r\n  const validateInfo = () => {\r\n    const emailRegex =\r\n      /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n    const urlRegex =\r\n      /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/;\r\n\r\n    setIsValidated(false);\r\n\r\n    const newErrors = {\r\n      name: false,\r\n      email: false,\r\n      pno: false,\r\n      github: false,\r\n      linkedin: false,\r\n      website: false,\r\n    };\r\n    const newErrorMessages = {\r\n      name: \"\",\r\n      email: \"\",\r\n      pno: \"\",\r\n      github: \"\",\r\n      linkedin: \"\",\r\n      website: \"\",\r\n    };\r\n    if (!values.name.length) {\r\n      newErrors[\"name\"] = true;\r\n      newErrorMessages[\"name\"] = \"This is a required field!\";\r\n    }\r\n    if (!values.pno.length) {\r\n      newErrors[\"pno\"] = true;\r\n      newErrorMessages[\"pno\"] = \"This is a required field!\";\r\n    }\r\n    if (!values.email.length) {\r\n      newErrors[\"email\"] = true;\r\n      newErrorMessages[\"email\"] = \"This is a required field!\";\r\n    }\r\n    if (values.email.length && !emailRegex.test(values.email)) {\r\n      newErrors[\"email\"] = true;\r\n      newErrorMessages[\"email\"] = \"Please enter a valid email address!\";\r\n    }\r\n    if (values.github.length && !urlRegex.test(values.github)) {\r\n      newErrors[\"github\"] = true;\r\n      newErrorMessages[\"github\"] = \"Please enter a valid URL!\";\r\n    }\r\n    if (values.linkedin.length && !urlRegex.test(values.linkedin)) {\r\n      newErrors[\"linkedin\"] = true;\r\n      newErrorMessages[\"linkedin\"] = \"Please enter a valid URL!\";\r\n    }\r\n    if (values.website.length && !urlRegex.test(values.website)) {\r\n      newErrors[\"website\"] = true;\r\n      newErrorMessages[\"website\"] = \"Please enter a valid URL!\";\r\n    }\r\n\r\n    setErrors({ ...newErrors });\r\n    setErrorMessages({ ...newErrorMessages });\r\n    setIsValidated(true);\r\n  };\r\n  const handleNext = () => {\r\n    if (!Object.values(errors).includes(true)) {\r\n      setResume({ ...resume, ...values });\r\n      setStep(step + 1);\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    if (isValidated) handleNext();\r\n  }, [isValidated, handleNext]);\r\n  const init = () => {\r\n    if (\"name\" in resume) {\r\n      const newValues = {};\r\n      newValues[\"name\"] = resume[\"name\"];\r\n      newValues[\"email\"] = resume[\"email\"];\r\n      newValues[\"pno\"] = resume[\"pno\"];\r\n      newValues[\"github\"] = resume[\"github\"];\r\n      newValues[\"linkedin\"] = resume[\"linkedin\"];\r\n      newValues[\"website\"] = resume[\"website\"];\r\n\r\n      setValues({ ...newValues });\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"card\" variant=\"outlined\">\r\n        <CardContent>\r\n          <form className={classes.root} autoComplete=\"on\">\r\n            <TextField\r\n              label=\"Name\"\r\n              variant=\"outlined\"\r\n              value={values.name}\r\n              onChange={(event) => onValueChange(\"name\", event)}\r\n              error={errors.name}\r\n              helperText={errors.name && errorMessages.name}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"E-mail\"\r\n              variant=\"outlined\"\r\n              value={values.email}\r\n              onChange={(event) => onValueChange(\"email\", event)}\r\n              error={errors.email}\r\n              helperText={errors.email && errorMessages.email}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"Phone Number\"\r\n              variant=\"outlined\"\r\n              value={values.pno}\r\n              onChange={(event) => onValueChange(\"pno\", event)}\r\n              error={errors.pno}\r\n              helperText={errors.pno && errorMessages.pno}\r\n              required\r\n            />\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card className=\"card\" variant=\"outlined\">\r\n        <CardContent>\r\n          <form className={classes.root} autoComplete=\"on\">\r\n            <TextField\r\n              label=\"GitHub URL\"\r\n              variant=\"outlined\"\r\n              value={values.github}\r\n              onChange={(event) => onValueChange(\"github\", event)}\r\n              error={errors.github}\r\n              helperText={errors.github && errorMessages.github}\r\n            />\r\n            <TextField\r\n              label=\"LinkedIn URL\"\r\n              variant=\"outlined\"\r\n              value={values.linkedin}\r\n              onChange={(event) => onValueChange(\"linkedin\", event)}\r\n              error={errors.linkedin}\r\n              helperText={errors.linkedin && errorMessages.linkedin}\r\n            />\r\n            <TextField\r\n              label=\"Website URL\"\r\n              variant=\"outlined\"\r\n              value={values.website}\r\n              onChange={(event) => onValueChange(\"website\", event)}\r\n              error={errors.website}\r\n              helperText={errors.website && errorMessages.website}\r\n            />\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <NavButtons {...props} validateInfo={validateInfo} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonalInfo;\r\n","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/pages/Home/Home.jsx",["90"],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Experiences/Experiences.jsx",["91"],"import React from \"react\";\nimport Experience from \"./Experience.jsx\";\nimport NavButtons from \"../NavButtons/NavButtons.jsx\";\n\nconst Experiences = (props) => {\n  const {\n    resume,\n    setResume,\n    step,\n    setStep,\n    setOldNumberOfExps,\n    numberOfExps,\n    setNumberOfExps,\n  } = props;\n  const value = {\n    company: \"\",\n    role: \"\",\n    from: \"\",\n    to: \"\",\n    desc: \"\",\n  };\n  const error = {\n    company: false,\n    role: false,\n    from: false,\n    to: false,\n    desc: false,\n  };\n  const errorMessage = {\n    company: \"\",\n    role: \"\",\n    from: \"\",\n    to: \"\",\n    desc: \"\",\n  };\n  const [values, setValues] = React.useState({\n    e1: { ...value },\n    e2: { ...value },\n    e3: { ...value },\n    e4: { ...value },\n  });\n  const [errors, setErrors] = React.useState({\n    e1: { ...error },\n    e2: { ...error },\n    e3: { ...error },\n    e4: { ...error },\n  });\n  const [errorMessages, setErrorMessages] = React.useState({\n    e1: { ...errorMessage },\n    e2: { ...errorMessage },\n    e3: { ...errorMessage },\n    e4: { ...errorMessage },\n  });\n  const [exps, setExps] = React.useState(0);\n  const [isValidated, setIsValidated] = React.useState(false);\n\n  const onChange = (id, value) => {\n    values[id] = value;\n    setValues({ ...values });\n  };\n  const validateInfo = () => {\n    setIsValidated(false);\n\n    let currExps = 0;\n    for (let exp in values) {\n      let newError = {\n        company: true,\n        role: true,\n        from: true,\n        to: true,\n        desc: true,\n      };\n      let newErrorMessage = {\n        company: \"Please provide complete info for this experience!\",\n        role: \"Please provide complete info for this experience!\",\n        from: \"Please provide complete info for this experience!\",\n        to: \"Please provide complete info for this experience!\",\n        desc: \"Please provide complete info for this experience!\",\n      };\n\n      let flag = false,\n        count = 0;\n      for (let key in values[exp]) {\n        if (values[exp][key].length) {\n          flag = true;\n          ++count;\n          newError[key] = false;\n          newErrorMessage[key] = \"\";\n        }\n      }\n\n      if (count === 5) ++currExps;\n      if (!flag) {\n        newError = {\n          company: false,\n          role: false,\n          from: false,\n          to: false,\n          desc: false,\n        };\n        newErrorMessage = {\n          company: \"\",\n          role: \"\",\n          from: \"\",\n          to: \"\",\n          desc: \"\",\n        };\n      }\n      errors[exp] = newError;\n      errorMessages[exp] = newErrorMessage;\n    }\n\n    setExps(currExps);\n    setErrors({ ...errors });\n    setErrorMessages({ ...errorMessages });\n    setIsValidated(true);\n  };\n  const handleNext = () => {\n    let flag = false;\n    for (let error of Object.values(errors)) {\n      if (Object.values(error).includes(true)) {\n        flag = true;\n        break;\n      }\n    }\n\n    if (!flag) {\n      setOldNumberOfExps(numberOfExps);\n      setNumberOfExps(exps);\n      setResume({ ...resume, ...values });\n      setStep(step + 1);\n    }\n  };\n  React.useEffect(() => {\n    if (isValidated) handleNext();\n  });\n  const init = () => {\n    const newValues = {};\n    for (let i = 1; i <= 4; ++i) {\n      if (`e${i}` in resume) newValues[`e${i}`] = resume[`e${i}`];\n    }\n\n    if (Object.keys(newValues).length) setValues({ ...newValues });\n  };\n  React.useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div>\n      <Experience\n        id=\"e1\"\n        onChange={onChange}\n        values={values[\"e1\"]}\n        errors={errors[\"e1\"]}\n        errorMessages={errorMessages[\"e1\"]}\n      />\n      <Experience\n        id=\"e2\"\n        onChange={onChange}\n        values={values[\"e2\"]}\n        errors={errors[\"e2\"]}\n        errorMessages={errorMessages[\"e2\"]}\n      />\n      <Experience\n        id=\"e3\"\n        onChange={onChange}\n        values={values[\"e3\"]}\n        errors={errors[\"e3\"]}\n        errorMessages={errorMessages[\"e3\"]}\n      />\n      <Experience\n        id=\"e4\"\n        onChange={onChange}\n        values={values[\"e4\"]}\n        errors={errors[\"e4\"]}\n        errorMessages={errorMessages[\"e4\"]}\n      />\n      <NavButtons {...props} validateInfo={validateInfo} />\n    </div>\n  );\n};\n\nexport default Experiences;\n","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Projects/Projects.jsx",["92","93","94"],"import React from \"react\";\r\nimport Project from \"./Project.jsx\";\r\nimport NavButtons from \"../NavButtons/NavButtons.jsx\";\r\n\r\nconst Projects = (props) => {\r\n  const {\r\n    resume,\r\n    setResume,\r\n    step,\r\n    setStep,\r\n    oldNumberOfExps,\r\n    setOldNumberOfExps,\r\n    numberOfExps,\r\n    setPdfUrl,\r\n    setGetUrl,\r\n  } = props;\r\n  const value = {\r\n    title: \"\",\r\n    link: \"\",\r\n    from: \"\",\r\n    to: \"\",\r\n    desc: \"\",\r\n  };\r\n  const error = {\r\n    title: false,\r\n    link: false,\r\n    from: false,\r\n    to: false,\r\n    desc: false,\r\n  };\r\n  const errorMessage = {\r\n    title: \"\",\r\n    link: \"\",\r\n    from: \"\",\r\n    to: \"\",\r\n    desc: \"\",\r\n  };\r\n\r\n  const [values, setValues] = React.useState({\r\n    p1: { ...value },\r\n    p2: { ...value },\r\n    p3: { ...value },\r\n    p4: { ...value },\r\n  });\r\n  const [errors, setErrors] = React.useState({\r\n    p1: { ...error },\r\n    p2: { ...error },\r\n    p3: { ...error },\r\n    p4: { ...error },\r\n  });\r\n  const [errorMessages, setErrorMessages] = React.useState({\r\n    p1: { ...errorMessage },\r\n    p2: { ...errorMessage },\r\n    p3: { ...errorMessage },\r\n    p4: { ...errorMessage },\r\n  });\r\n  const [projects, setProjects] = React.useState(0);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n\r\n  const onChange = (id, value) => {\r\n    values[id] = value;\r\n    setValues({ ...values });\r\n  };\r\n  const validateInfo = () => {\r\n    setIsValidated(false);\r\n\r\n    const urlRegex =\r\n      /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/;\r\n    let currProjects = 0;\r\n    for (let pro in values) {\r\n      let newError = {\r\n        title: true,\r\n        link: true,\r\n        from: true,\r\n        to: true,\r\n        desc: true,\r\n      };\r\n      let newErrorMessage = {\r\n        title: \"Please provide complete info for this project!\",\r\n        link: \"Please provide complete info for this project!\",\r\n        from: \"Please provide complete info for this project!\",\r\n        to: \"Please provide complete info for this project!\",\r\n        desc: \"Please provide complete info for this project!\",\r\n      };\r\n\r\n      let flag = false,\r\n        count = 0;\r\n      for (let key in values[pro]) {\r\n        if (values[pro][key].length) {\r\n          if (key === \"link\" && !urlRegex.test(values[pro][key])) {\r\n            newErrorMessage[key] = \"Please enter a valid URL!\";\r\n          } else {\r\n            ++count;\r\n            newError[key] = false;\r\n            newErrorMessage[key] = \"\";\r\n          }\r\n          flag = true;\r\n        }\r\n      }\r\n\r\n      if (count === 5) ++currProjects;\r\n      if (!flag) {\r\n        newError = {\r\n          title: false,\r\n          link: false,\r\n          from: false,\r\n          to: false,\r\n          desc: false,\r\n        };\r\n        newErrorMessage = {\r\n          title: \"\",\r\n          link: \"\",\r\n          from: \"\",\r\n          to: \"\",\r\n          desc: \"\",\r\n        };\r\n      }\r\n      errors[pro] = newError;\r\n      errorMessages[pro] = newErrorMessage;\r\n    }\r\n\r\n    setProjects(currProjects);\r\n    setErrors({ ...errors });\r\n    setErrorMessages({ ...errorMessages });\r\n    setIsValidated(true);\r\n  };\r\n  const handleNext = () => {\r\n    let flag = false;\r\n    for (let error of Object.values(errors)) {\r\n      if (Object.values(error).includes(true)) {\r\n        flag = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    let minProjects = 0;\r\n    if (numberOfExps === 0) minProjects = 2;\r\n    else if (numberOfExps === 1) minProjects = 1;\r\n    else minProjects = 0;\r\n\r\n    if (!flag && projects >= minProjects) {\r\n      setResume({ ...resume, ...values });\r\n      setPdfUrl(\"\");\r\n      setGetUrl(true);\r\n      setOldNumberOfExps(numberOfExps);\r\n      setStep(step + 1);\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    if (isValidated) handleNext();\r\n  });\r\n  const InitWhenExpIsOne = () => {\r\n    const newValues = {\r\n      p1: { ...value },\r\n      p2: { ...value },\r\n      p3: { ...value },\r\n    };\r\n    const newErrors = {\r\n      p1: { ...error },\r\n      p2: { ...error },\r\n      p3: { ...error },\r\n    };\r\n    const newErrorMessages = {\r\n      p1: { ...errorMessage },\r\n      p2: { ...errorMessage },\r\n      p3: { ...errorMessage },\r\n    };\r\n    setValues({ ...newValues });\r\n    setErrors({ ...newErrors });\r\n    setErrorMessages({ ...newErrorMessages });\r\n  };\r\n  const InitWhenExpIsTwo = () => {\r\n    const newValues = {\r\n      p1: { ...value },\r\n      p2: { ...value },\r\n    };\r\n    const newErrors = {\r\n      p1: { ...error },\r\n      p2: { ...error },\r\n    };\r\n    const newErrorMessages = {\r\n      p1: { ...errorMessage },\r\n      p2: { ...errorMessage },\r\n    };\r\n    setValues({ ...newValues });\r\n    setErrors({ ...newErrors });\r\n    setErrorMessages({ ...newErrorMessages });\r\n  };\r\n  const InitWhenExpIsThree = () => {\r\n    const newValues = {\r\n      p1: { ...value },\r\n    };\r\n    const newErrors = {\r\n      p1: { ...error },\r\n    };\r\n    const newErrorMessages = {\r\n      p1: { ...errorMessage },\r\n    };\r\n    setValues({ ...newValues });\r\n    setErrors({ ...newErrors });\r\n    setErrorMessages({ ...newErrorMessages });\r\n  };\r\n  const init = () => {\r\n    const newValues = {};\r\n    for (let i = 1; i <= 4; ++i) {\r\n      if (`p${i}` in resume) newValues[`p${i}`] = resume[`p${i}`];\r\n    }\r\n\r\n    if (Object.keys(newValues).length) setValues({ ...newValues });\r\n  };\r\n  React.useEffect(() => {\r\n    if (numberOfExps === 1) InitWhenExpIsOne();\r\n    else if (numberOfExps === 2) InitWhenExpIsTwo();\r\n    else if (numberOfExps === 3) InitWhenExpIsThree();\r\n\r\n    if (oldNumberOfExps === numberOfExps) init();\r\n  }, []);\r\n\r\n  if (numberOfExps === 0) {\r\n    return (\r\n      <div>\r\n        <h3>\r\n          As you haven't entered any experiences, please provide at least 2\r\n          projects below\r\n        </h3>\r\n        <Project\r\n          id=\"p1\"\r\n          onChange={onChange}\r\n          values={values[\"p1\"]}\r\n          errors={errors[\"p1\"]}\r\n          errorMessages={errorMessages[\"p1\"]}\r\n        />\r\n        <Project\r\n          id=\"p2\"\r\n          onChange={onChange}\r\n          values={values[\"p2\"]}\r\n          errors={errors[\"p2\"]}\r\n          errorMessages={errorMessages[\"p2\"]}\r\n        />\r\n        <Project\r\n          id=\"p3\"\r\n          onChange={onChange}\r\n          values={values[\"p3\"]}\r\n          errors={errors[\"p3\"]}\r\n          errorMessages={errorMessages[\"p3\"]}\r\n        />\r\n        <Project\r\n          id=\"p4\"\r\n          onChange={onChange}\r\n          values={values[\"p4\"]}\r\n          errors={errors[\"p4\"]}\r\n          errorMessages={errorMessages[\"p4\"]}\r\n        />\r\n        <NavButtons {...props} validateInfo={validateInfo} />\r\n      </div>\r\n    );\r\n  } else if (numberOfExps === 1) {\r\n    return (\r\n      <div>\r\n        <h3>\r\n          As you have entered only 1 experience, please provide at least 1\r\n          project below\r\n        </h3>\r\n        <Project\r\n          id=\"p1\"\r\n          onChange={onChange}\r\n          values={values[\"p1\"]}\r\n          errors={errors[\"p1\"]}\r\n          errorMessages={errorMessages[\"p1\"]}\r\n        />\r\n        <Project\r\n          id=\"p2\"\r\n          onChange={onChange}\r\n          values={values[\"p2\"]}\r\n          errors={errors[\"p2\"]}\r\n          errorMessages={errorMessages[\"p2\"]}\r\n        />\r\n        <Project\r\n          id=\"p3\"\r\n          onChange={onChange}\r\n          values={values[\"p3\"]}\r\n          errors={errors[\"p3\"]}\r\n          errorMessages={errorMessages[\"p3\"]}\r\n        />\r\n        <NavButtons {...props} validateInfo={validateInfo} />\r\n      </div>\r\n    );\r\n  } else if (numberOfExps === 2) {\r\n    return (\r\n      <div>\r\n        <Project\r\n          id=\"p1\"\r\n          onChange={onChange}\r\n          values={values[\"p1\"]}\r\n          errors={errors[\"p1\"]}\r\n          errorMessages={errorMessages[\"p1\"]}\r\n        />\r\n        <Project\r\n          id=\"p2\"\r\n          onChange={onChange}\r\n          values={values[\"p2\"]}\r\n          errors={errors[\"p2\"]}\r\n          errorMessages={errorMessages[\"p2\"]}\r\n        />\r\n        <NavButtons {...props} validateInfo={validateInfo} />\r\n      </div>\r\n    );\r\n  } else if (numberOfExps === 3) {\r\n    return (\r\n      <div>\r\n        <Project\r\n          id=\"p1\"\r\n          onChange={onChange}\r\n          values={values[\"p1\"]}\r\n          errors={errors[\"p1\"]}\r\n          errorMessages={errorMessages[\"p1\"]}\r\n        />\r\n        <NavButtons {...props} validateInfo={validateInfo} />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <h3>\r\n          As you have entered 4 experiences, there is no need for projects\r\n        </h3>\r\n        <h4>Please move to the next step</h4>\r\n        <NavButtons {...props} validateInfo={validateInfo} />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Projects;\r\n","/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Preview/Preview.jsx",[],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/NavBar/NavBar.jsx",[],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Experiences/Experience.jsx",[],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/Projects/Project.jsx",[],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/NavButtons/NavButtons.jsx",[],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/pages/Information/Information.jsx",[],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/NavBar2/NavBar2.jsx",[],"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/client/src/components/HorizontalLinearStepper/HorizontalLinearStepper.jsx",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":192,"column":13,"nodeType":"101","messageId":"102","endLine":192,"endColumn":24},{"ruleId":"103","severity":1,"message":"104","line":42,"column":16,"nodeType":"105","messageId":"106","endLine":42,"endColumn":18},{"ruleId":"107","severity":1,"message":"108","line":127,"column":6,"nodeType":"109","endLine":127,"endColumn":8,"suggestions":"110"},{"ruleId":"107","severity":1,"message":"108","line":107,"column":6,"nodeType":"109","endLine":107,"endColumn":8,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":54,"column":43,"nodeType":"114","messageId":"115","endLine":54,"endColumn":44,"suggestions":"116"},{"ruleId":"112","severity":1,"message":"113","line":54,"column":96,"nodeType":"114","messageId":"115","endLine":54,"endColumn":97,"suggestions":"117"},{"ruleId":"107","severity":1,"message":"118","line":107,"column":9,"nodeType":"119","endLine":112,"endColumn":4},{"ruleId":"107","severity":1,"message":"108","line":131,"column":6,"nodeType":"109","endLine":131,"endColumn":8,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":11,"column":9,"nodeType":"123","endLine":15,"endColumn":11},{"ruleId":"107","severity":1,"message":"108","line":147,"column":6,"nodeType":"109","endLine":147,"endColumn":8,"suggestions":"124"},{"ruleId":"112","severity":1,"message":"113","line":68,"column":43,"nodeType":"114","messageId":"115","endLine":68,"endColumn":44,"suggestions":"125"},{"ruleId":"112","severity":1,"message":"113","line":68,"column":96,"nodeType":"114","messageId":"115","endLine":68,"endColumn":97,"suggestions":"126"},{"ruleId":"107","severity":1,"message":"127","line":217,"column":6,"nodeType":"109","endLine":217,"endColumn":8,"suggestions":"128"},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.","ArrayExpression",["131"],["132"],"no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["133","134"],["135","136"],"The 'handleNext' function makes the dependencies of useEffect Hook (at line 115) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'handleNext' in its own useCallback() Hook.","VariableDeclarator",["137"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["138"],["139","140"],["141","142"],"React Hook React.useEffect has missing dependencies: 'InitWhenExpIsOne', 'InitWhenExpIsThree', 'InitWhenExpIsTwo', 'init', 'numberOfExps', and 'oldNumberOfExps'. Either include them or remove the dependency array.",["143"],"no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"144","fix":"146"},{"messageId":"147","fix":"148","desc":"149"},{"messageId":"150","fix":"151","desc":"152"},{"messageId":"147","fix":"153","desc":"149"},{"messageId":"150","fix":"154","desc":"152"},{"desc":"144","fix":"155"},{"desc":"144","fix":"156"},{"messageId":"147","fix":"157","desc":"149"},{"messageId":"150","fix":"158","desc":"152"},{"messageId":"147","fix":"159","desc":"149"},{"messageId":"150","fix":"160","desc":"152"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [init]",{"range":"163","text":"164"},{"range":"165","text":"164"},"removeEscape",{"range":"166","text":"167"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"168","text":"169"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"170","text":"167"},{"range":"171","text":"169"},{"range":"172","text":"164"},{"range":"173","text":"164"},{"range":"174","text":"167"},{"range":"175","text":"169"},{"range":"176","text":"167"},{"range":"177","text":"169"},"Update the dependencies array to be: [InitWhenExpIsOne, InitWhenExpIsThree, InitWhenExpIsTwo, init, numberOfExps, oldNumberOfExps]",{"range":"178","text":"179"},[3439,3441],"[init]",[2617,2619],[1557,1558],"",[1557,1557],"\\",[1610,1611],[1610,1610],[3920,3922],[3401,3403],[1481,1482],[1481,1481],[1534,1535],[1534,1534],[5554,5556],"[InitWhenExpIsOne, InitWhenExpIsThree, InitWhenExpIsTwo, init, numberOfExps, oldNumberOfExps]"]