{"ast":null,"code":"'use strict';\n\nconst PDFValue = require('./value');\n\nclass PDFArray {\n  constructor(array) {\n    if (!array) {\n      array = [];\n    }\n\n    array.toString = function () {\n      return '[' + this.map(item => String(item)).join(' ') + ']';\n    };\n\n    return array;\n  }\n\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(1) !== '[') {\n      if (trial) {\n        return undefined;\n      }\n\n      throw new Error('Invalid array');\n    }\n\n    lexer.shift(1);\n    lexer.skipWhitespace(null, true);\n    const values = [];\n\n    while (lexer.getString(1) !== ']') {\n      values.push(PDFValue.parse(xref, lexer));\n      lexer.skipWhitespace(null, true);\n    }\n\n    lexer.shift(1);\n    return new PDFArray(values);\n  }\n\n}\n\nmodule.exports = PDFArray;","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/lib/object/array.js"],"names":["PDFValue","require","PDFArray","constructor","array","toString","map","item","String","join","parse","xref","lexer","trial","getString","undefined","Error","shift","skipWhitespace","values","push","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,SAAD,CAAxB;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,QAAI,CAACA,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG,EAAR;AACD;;AAEDA,IAAAA,KAAK,CAACC,QAAN,GAAiB,YAAW;AAC1B,aAAO,MAAM,KAAKC,GAAL,CAASC,IAAI,IAAIC,MAAM,CAACD,IAAD,CAAvB,EAA+BE,IAA/B,CAAoC,GAApC,CAAN,GAAiD,GAAxD;AACD,KAFD;;AAIA,WAAOL,KAAP;AACD;;AAEW,SAALM,KAAK,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAqB;AAC/B,QAAID,KAAK,CAACE,SAAN,CAAgB,CAAhB,MAAuB,GAA3B,EAAgC;AAC9B,UAAID,KAAJ,EAAW;AACT,eAAOE,SAAP;AACD;;AAED,YAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;;AAEDJ,IAAAA,KAAK,CAACK,KAAN,CAAY,CAAZ;AACAL,IAAAA,KAAK,CAACM,cAAN,CAAqB,IAArB,EAA2B,IAA3B;AAEA,UAAMC,MAAM,GAAG,EAAf;;AAEA,WAAOP,KAAK,CAACE,SAAN,CAAgB,CAAhB,MAAuB,GAA9B,EAAmC;AACjCK,MAAAA,MAAM,CAACC,IAAP,CAAYpB,QAAQ,CAACU,KAAT,CAAeC,IAAf,EAAqBC,KAArB,CAAZ;AACAA,MAAAA,KAAK,CAACM,cAAN,CAAqB,IAArB,EAA2B,IAA3B;AACD;;AAEDN,IAAAA,KAAK,CAACK,KAAN,CAAY,CAAZ;AAEA,WAAO,IAAIf,QAAJ,CAAaiB,MAAb,CAAP;AACD;;AAnCY;;AAsCfE,MAAM,CAACC,OAAP,GAAiBpB,QAAjB","sourcesContent":["'use strict'\n\nconst PDFValue = require('./value')\n\nclass PDFArray {\n  constructor(array) {\n    if (!array) {\n      array = []\n    }\n\n    array.toString = function() {\n      return '[' + this.map(item => String(item)).join(' ') + ']'\n    }\n\n    return array\n  }\n\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(1) !== '[') {\n      if (trial) {\n        return undefined\n      }\n\n      throw new Error('Invalid array')\n    }\n\n    lexer.shift(1)\n    lexer.skipWhitespace(null, true)\n\n    const values = []\n\n    while (lexer.getString(1) !== ']') {\n      values.push(PDFValue.parse(xref, lexer))\n      lexer.skipWhitespace(null, true)\n    }\n\n    lexer.shift(1)\n\n    return new PDFArray(values)\n  }\n}\n\nmodule.exports = PDFArray"]},"metadata":{},"sourceType":"script"}