{"ast":null,"code":"'use strict';\n\nconst PDFName = require('../object/name');\n\nconst PDFObject = require('../object/object');\n\nconst PDFString = require('../object/string');\n\nconst PDFArray = require('../object/array');\n\nconst Base = require('./base');\n\nconst StringWidth = Base.StringWidth;\nmodule.exports = class AFMFont extends Base {\n  constructor(data) {\n    super();\n    this._data = data;\n    this.lineGap = this._data.fontBBox[3] - this._data.fontBBox[1] - (this._data.ascender - this._data.descender);\n    this.parent = this;\n  }\n\n  instance() {\n    return this;\n  }\n\n  encode(str) {\n    let encoded = '';\n\n    for (let i = 0, len = str.length; i < len; ++i) {\n      switch (str[i]) {\n        case '\\\\':\n          encoded += '\\\\\\\\';\n          break;\n\n        case '(':\n          encoded += '\\\\(';\n          break;\n\n        case ')':\n          encoded += '\\\\)';\n          break;\n\n        default:\n          encoded += String.fromCharCode(this._charCodeFor(str[i]));\n      }\n    }\n\n    return '(' + encoded + ')';\n  }\n\n  _charCodeFor(c) {\n    return c in UNICODE_TO_WIN1252 ? UNICODE_TO_WIN1252[c] : c.charCodeAt(0);\n  }\n\n  stringWidth(str, size) {\n    const scale = size / 1000;\n    let width = 0;\n    const kerning = [];\n\n    for (let i = 0, len = str.length; i < len; ++i) {\n      const left = this._charCodeFor(str[i]);\n\n      const advanceWidth = this._data.widths[left];\n\n      if (advanceWidth) {\n        width += advanceWidth;\n      }\n\n      if (str[i + 1] !== undefined && left in this._data.kerning) {\n        const right = this._charCodeFor(str[i + 1]);\n\n        const offset = this._data.kerning[left][right];\n\n        if (offset !== undefined) {\n          width += offset;\n          kerning.push({\n            pos: i + 1,\n            offset: -offset\n          });\n        }\n      }\n    }\n\n    return new StringWidth(width * scale, kerning);\n  }\n\n  lineHeight(size, includeGap) {\n    if (includeGap == null) {\n      includeGap = false;\n    }\n\n    const gap = includeGap ? this.lineGap : 0;\n    return (this._data.ascender - this._data.descender) * size / 1000;\n  }\n\n  ascent(size) {\n    return this._data.ascender * size / 1000;\n  }\n\n  descent(size) {\n    return this._data.descender * size / 1000;\n  }\n\n  underlinePosition(size) {\n    return this._data.underlinePosition * size / 1000;\n  }\n\n  underlineThickness(size) {\n    return this._data.underlineThickness * size / 1000;\n  }\n\n  async write(doc, fontObj) {\n    fontObj.prop('Subtype', 'Type1');\n    fontObj.prop('BaseFont', this._data.fontName);\n    fontObj.prop('Encoding', 'WinAnsiEncoding');\n    await doc._writeObject(fontObj);\n  }\n\n}; // only the once different from ISO-8859-1 are relevant, see\n// https://en.wikipedia.org/wiki/Windows-1252\n\nconst UNICODE_TO_WIN1252 = {\n  '\\u20ac': 128,\n  '\\u201a': 130,\n  '\\u0192': 131,\n  '\\u201e': 132,\n  '\\u2026': 133,\n  '\\u2020': 134,\n  '\\u2021': 135,\n  '\\u02c6': 136,\n  '\\u2030': 137,\n  '\\u0160': 138,\n  '\\u2039': 139,\n  '\\u0152': 140,\n  '\\u017d': 142,\n  '\\u2018': 145,\n  '\\u2019': 146,\n  '\\u201c': 147,\n  '\\u201d': 148,\n  '\\u2022': 149,\n  '\\u2013': 150,\n  '\\u2014': 151,\n  '\\u02dc': 152,\n  '\\u2122': 153,\n  '\\u0161': 154,\n  '\\u203a': 155,\n  '\\u0153': 156,\n  '\\u017e': 158,\n  '\\u0178': 159\n};","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/lib/font/afm.js"],"names":["PDFName","require","PDFObject","PDFString","PDFArray","Base","StringWidth","module","exports","AFMFont","constructor","data","_data","lineGap","fontBBox","ascender","descender","parent","instance","encode","str","encoded","i","len","length","String","fromCharCode","_charCodeFor","c","UNICODE_TO_WIN1252","charCodeAt","stringWidth","size","scale","width","kerning","left","advanceWidth","widths","undefined","right","offset","push","pos","lineHeight","includeGap","gap","ascent","descent","underlinePosition","underlineThickness","write","doc","fontObj","prop","fontName","_writeObject"],"mappings":"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","sourcesContent":["'use strict'\n\nconst PDFName = require('../object/name')\nconst PDFObject = require('../object/object')\nconst PDFString = require('../object/string')\nconst PDFArray = require('../object/array')\nconst Base = require('./base')\nconst StringWidth = Base.StringWidth\n\nmodule.exports = class AFMFont extends Base {\n  constructor(data) {\n    super()\n\n    this._data = data\n    this.lineGap = (this._data.fontBBox[3] - this._data.fontBBox[1]) - (this._data.ascender - this._data.descender)\n    this.parent = this\n  }\n\n  instance() {\n    return this\n  }\n\n  encode(str) {\n    let encoded = ''\n    for (let i = 0, len = str.length; i < len; ++i) {\n      switch (str[i]) {\n      case '\\\\':\n        encoded += '\\\\\\\\'\n        break\n      case '(':\n        encoded += '\\\\('\n        break\n      case ')':\n        encoded += '\\\\)'\n        break\n      default:\n        encoded += String.fromCharCode(this._charCodeFor(str[i]))\n      }\n    }\n\n    return '(' + encoded + ')'\n  }\n\n  _charCodeFor(c) {\n    return c in UNICODE_TO_WIN1252\n      ? UNICODE_TO_WIN1252[c]\n      : c.charCodeAt(0)\n  }\n\n  stringWidth(str, size) {\n    const scale = size / 1000\n    let width = 0\n    const kerning = []\n    for (let i = 0, len = str.length; i < len; ++i) {\n      const left = this._charCodeFor(str[i])\n\n      const advanceWidth = this._data.widths[left]\n      if (advanceWidth) {\n        width += advanceWidth\n      }\n\n      if (str[i + 1] !== undefined && left in this._data.kerning) {\n        const right = this._charCodeFor(str[i + 1])\n        const offset = this._data.kerning[left][right]\n        if (offset !== undefined) {\n          width += offset\n          kerning.push({ pos: i + 1, offset: -offset })\n        }\n      }\n    }\n\n    return new StringWidth(width * scale, kerning)\n  }\n\n  lineHeight(size, includeGap) {\n    if (includeGap == null) {\n      includeGap = false\n    }\n\n    const gap = includeGap ? (this.lineGap) : 0\n\n    return (this._data.ascender - this._data.descender) * size / 1000\n  }\n\n  ascent(size) {\n    return this._data.ascender * size / 1000\n  }\n\n  descent(size) {\n    return this._data.descender * size / 1000\n  }\n\n  underlinePosition(size) {\n    return this._data.underlinePosition * size / 1000\n  }\n\n  underlineThickness(size) {\n    return this._data.underlineThickness * size / 1000\n  }\n\n  async write(doc, fontObj) {\n    fontObj.prop('Subtype', 'Type1')\n    fontObj.prop('BaseFont', this._data.fontName)\n    fontObj.prop('Encoding', 'WinAnsiEncoding')\n\n    await doc._writeObject(fontObj)\n  }\n}\n\n// only the once different from ISO-8859-1 are relevant, see\n// https://en.wikipedia.org/wiki/Windows-1252\nconst UNICODE_TO_WIN1252 = {\n  '\\u20ac': 128,\n  '\\u201a': 130,\n  '\\u0192': 131,\n  '\\u201e': 132,\n  '\\u2026': 133,\n  '\\u2020': 134,\n  '\\u2021': 135,\n  '\\u02c6': 136,\n  '\\u2030': 137,\n  '\\u0160': 138,\n  '\\u2039': 139,\n  '\\u0152': 140,\n  '\\u017d': 142,\n  '\\u2018': 145,\n  '\\u2019': 146,\n  '\\u201c': 147,\n  '\\u201d': 148,\n  '\\u2022': 149,\n  '\\u2013': 150,\n  '\\u2014': 151,\n  '\\u02dc': 152,\n  '\\u2122': 153,\n  '\\u0161': 154,\n  '\\u203a': 155,\n  '\\u0153': 156,\n  '\\u017e': 158,\n  '\\u0178': 159\n}"]},"metadata":{},"sourceType":"script"}