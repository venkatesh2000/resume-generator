{"ast":null,"code":"// String encode/decode helpers\n'use strict'; // Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\n\nlet STR_APPLY_UIA_OK = true;\n\ntry {\n  String.fromCharCode.apply(null, new Uint8Array(1));\n} catch (__) {\n  STR_APPLY_UIA_OK = false;\n} // Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\n\n\nconst _utf8len = new Uint8Array(256);\n\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;\n}\n\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n// convert string to array (typed, when possible)\n\nmodule.exports.string2buf = str => {\n  let buf,\n      c,\n      c2,\n      m_pos,\n      i,\n      str_len = str.length,\n      buf_len = 0; // count binary size\n\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n\n    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n      c2 = str.charCodeAt(m_pos + 1);\n\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  } // allocate buffer\n\n\n  buf = new Uint8Array(buf_len); // convert\n\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n\n    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n      c2 = str.charCodeAt(m_pos + 1);\n\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | c >>> 6;\n      buf[i++] = 0x80 | c & 0x3f;\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | c >>> 12;\n      buf[i++] = 0x80 | c >>> 6 & 0x3f;\n      buf[i++] = 0x80 | c & 0x3f;\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | c >>> 18;\n      buf[i++] = 0x80 | c >>> 12 & 0x3f;\n      buf[i++] = 0x80 | c >>> 6 & 0x3f;\n      buf[i++] = 0x80 | c & 0x3f;\n    }\n  }\n\n  return buf;\n}; // Helper\n\n\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n\n  return result;\n}; // convert array to string\n\n\nmodule.exports.buf2string = (buf, max) => {\n  let i, out;\n  const len = max || buf.length; // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++]; // quick process ascii\n\n    if (c < 0x80) {\n      utf16buf[out++] = c;\n      continue;\n    }\n\n    let c_len = _utf8len[c]; // skip 5 & 6 byte codes\n\n    if (c_len > 4) {\n      utf16buf[out++] = 0xfffd;\n      i += c_len - 1;\n      continue;\n    } // apply mask on first byte\n\n\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07; // join the rest\n\n    while (c_len > 1 && i < len) {\n      c = c << 6 | buf[i++] & 0x3f;\n      c_len--;\n    } // terminated by end of string?\n\n\n    if (c_len > 1) {\n      utf16buf[out++] = 0xfffd;\n      continue;\n    }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;\n      utf16buf[out++] = 0xdc00 | c & 0x3ff;\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n}; // Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\n\n\nmodule.exports.utf8border = (buf, max) => {\n  max = max || buf.length;\n\n  if (max > buf.length) {\n    max = buf.length;\n  } // go back from last position, until start of sequence found\n\n\n  let pos = max - 1;\n\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {\n    pos--;\n  } // Very small and broken sequence,\n  // return max, because we should return something anyway.\n\n\n  if (pos < 0) {\n    return max;\n  } // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n\n\n  if (pos === 0) {\n    return max;\n  }\n\n  return pos + _utf8len[buf[pos]] > max ? pos : max;\n};","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/node_modules/pako/lib/utils/strings.js"],"names":["STR_APPLY_UIA_OK","String","fromCharCode","apply","Uint8Array","__","_utf8len","q","module","exports","string2buf","str","buf","c","c2","m_pos","i","str_len","length","buf_len","charCodeAt","buf2binstring","len","subarray","result","buf2string","max","out","utf16buf","Array","c_len","utf8border","pos"],"mappings":"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","sourcesContent":["// String encode/decode helpers\n'use strict';\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nmodule.exports.string2buf = (str) => {\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nmodule.exports.buf2string = (buf, max) => {\n  let i, out;\n  const len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nmodule.exports.utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n"]},"metadata":{},"sourceType":"script"}