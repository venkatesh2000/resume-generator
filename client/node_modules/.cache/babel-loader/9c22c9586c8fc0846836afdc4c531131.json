{"ast":null,"code":"var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);\n  /* table of code length counts */\n\n  this.trans = new Uint16Array(288);\n  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  this.dest = dest;\n  this.destLen = 0;\n  this.ltree = new Tree();\n  /* dynamic length/symbol tree */\n\n  this.dtree = new Tree();\n  /* dynamic distance tree */\n}\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n/* extra bits and base tables for length codes */\n\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n/* extra bits and base tables for distance codes */\n\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n/* special ordering of code length codes */\n\nvar clcidx = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n/* used by tinf_decode_trees, avoids allocations every call */\n\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\n\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n  /* build bits table */\n\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n  /* build base table */\n\n\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n/* build the fixed huffman trees */\n\n\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n  /* build fixed length tree */\n\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n  /* build fixed distance tree */\n\n\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n/* given an array of code lengths, build a tree */\n\n\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n  /* clear code length count table */\n\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n  /* scan symbol lengths, and sum code length counts */\n\n\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n  /* compute offset table for distribution sort */\n\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n  /* create code->symbol translation table (symbols sorted by code) */\n\n\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\n\n\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n  /* shift bit out of tag */\n\n\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n  return bit;\n}\n/* read a num bit value from a stream and add base */\n\n\nfunction tinf_read_bits(d, num, base) {\n  if (!num) return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & 0xffff >>> 16 - num;\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n/* given a data stream and a tree, decode a symbol */\n\n\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var sum = 0,\n      cur = 0,\n      len = 0;\n  var tag = d.tag;\n  /* get more bits while code value is above sum */\n\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n\n  d.tag = tag;\n  d.bitcount -= len;\n  return t.trans[sum + cur];\n}\n/* given a data stream, decode dynamic trees from it */\n\n\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n  /* get 5 bits HLIT (257-286) */\n\n  hlit = tinf_read_bits(d, 5, 257);\n  /* get 5 bits HDIST (1-32) */\n\n  hdist = tinf_read_bits(d, 5, 1);\n  /* get 4 bits HCLEN (4-19) */\n\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n  /* read code lengths for code length alphabet */\n\n\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n  /* build code length tree */\n\n\n  tinf_build_tree(code_tree, lengths, 0, 19);\n  /* decode code lengths for the dynamic trees */\n\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n\n        break;\n\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n\n        break;\n\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n\n        break;\n\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n  /* build dynamic trees */\n\n\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\n\n\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n    /* check for end of block */\n\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n      sym -= 257;\n      /* possibly get more bits from length code */\n\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n      dist = tinf_decode_symbol(d, dt);\n      /* possibly get more bits from distance code */\n\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n      /* copy match */\n\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n/* inflate an uncompressed block of data */\n\n\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  /* unread from bitbuffer */\n\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n  /* get length */\n\n\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n  /* get one's complement of length */\n\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n  /* check length */\n\n  if (length !== (~invlength & 0x0000ffff)) return TINF_DATA_ERROR;\n  d.sourceIndex += 4;\n  /* copy block */\n\n  for (i = length; i; --i) d.dest[d.destLen++] = d.source[d.sourceIndex++];\n  /* make sure we start next block on a byte boundary */\n\n\n  d.bitcount = 0;\n  return TINF_OK;\n}\n/* inflate stream from source to dest */\n\n\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n    /* read block type (2 bits) */\n\n    btype = tinf_read_bits(d, 2, 0);\n    /* decompress block */\n\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK) throw new Error('Data error');\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function') return d.dest.slice(0, d.destLen);else return d.dest.subarray(0, d.destLen);\n  }\n\n  return d.dest;\n}\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\n\n\ntinf_build_fixed_trees(sltree, sdtree);\n/* build extra bits and base tables */\n\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n/* fix a special case */\n\nlength_bits[28] = 0;\nlength_base[28] = 258;\nmodule.exports = tinf_uncompress;","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/tiny-inflate/index.js"],"names":["TINF_OK","TINF_DATA_ERROR","Tree","table","Uint16Array","trans","Data","source","dest","sourceIndex","tag","bitcount","destLen","ltree","dtree","sltree","sdtree","length_bits","Uint8Array","length_base","dist_bits","dist_base","clcidx","code_tree","lengths","tinf_build_bits_base","bits","base","delta","first","i","sum","tinf_build_fixed_trees","lt","dt","offs","tinf_build_tree","t","off","num","tinf_getbit","d","bit","tinf_read_bits","val","tinf_decode_symbol","cur","len","tinf_decode_trees","hlit","hdist","hclen","length","clen","sym","prev","tinf_inflate_block_data","dist","tinf_inflate_uncompressed_block","invlength","tinf_uncompress","bfinal","btype","res","Error","slice","subarray","module","exports"],"mappings":"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","sourcesContent":["var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n"]},"metadata":{},"sourceType":"script"}