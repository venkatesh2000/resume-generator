{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/src/components/Experiences/Experiences.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport NavButtons from \"../NavButtons/NavButtons.jsx\";\nimport Experience from \"./Experience.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Experiences = props => {\n  _s();\n\n  const {\n    step,\n    setStep\n  } = props;\n  const value = {\n    job: \"\",\n    role: \"\",\n    from: \"\",\n    to: \"\",\n    desc: \"\"\n  };\n  const error = {\n    job: false,\n    role: false,\n    from: false,\n    to: false,\n    desc: false\n  };\n  const errorMessage = {\n    job: \"\",\n    role: \"\",\n    from: \"\",\n    to: \"\",\n    desc: \"\"\n  };\n  const [values, setValues] = React.useState({\n    e1: { ...value\n    },\n    e2: { ...value\n    },\n    e3: { ...value\n    },\n    e4: { ...value\n    }\n  });\n  const [errors, setErrors] = React.useState({\n    e1: { ...error\n    },\n    e2: { ...error\n    },\n    e3: { ...error\n    },\n    e4: { ...error\n    }\n  });\n  const [errorMessages, setErrorMessages] = React.useState({\n    e1: { ...errorMessage\n    },\n    e2: { ...errorMessage\n    },\n    e3: { ...errorMessage\n    },\n    e4: { ...errorMessage\n    }\n  });\n  const [isValidated, setIsValidated] = React.useState(false);\n\n  const onChange = (id, value) => {\n    values[id] = value;\n    setValues({ ...values\n    });\n  };\n\n  const validateInfo = () => {\n    setIsValidated(false);\n\n    for (let exp in values) {\n      let newError = {\n        job: true,\n        role: true,\n        from: true,\n        to: true,\n        desc: true\n      };\n      let newErrorMessage = {\n        job: \"Please provide complete info for this experience!\",\n        role: \"Please provide complete info for this experience!\",\n        from: \"Please provide complete info for this experience!\",\n        to: \"Please provide complete info for this experience!\",\n        desc: \"Please provide complete info for this experience!\"\n      };\n      let flag = false;\n\n      for (let key in values[exp]) {\n        if (values[exp][key].length) {\n          flag = true;\n          newError[key] = false;\n          newErrorMessage[key] = \"\";\n        }\n      }\n\n      if (flag) {\n        newError = {\n          job: false,\n          role: false,\n          from: false,\n          to: false,\n          desc: false\n        };\n        newErrorMessage = {\n          job: \"\",\n          role: \"\",\n          from: \"\",\n          to: \"\",\n          desc: \"\"\n        };\n      }\n\n      errors[exp] = { ...newError\n      };\n      errorMessages[exp] = { ...newErrorMessage\n      };\n    }\n\n    setErrors({ ...errors\n    });\n    setErrorMessages({ ...errorMessages\n    });\n    setIsValidated(true);\n  };\n\n  const handleNext = () => {\n    let flag = false;\n\n    for (let error of Object.values(errors)) {\n      if (Object.values(error).includes(true)) {\n        flag = true;\n        break;\n      }\n    }\n\n    if (!flag) setStep(step + 1);\n  };\n\n  React.useEffect(() => {\n    if (isValidated) handleNext();\n  }, [isValidated, handleNext]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Experience, {\n      id: \"e1\",\n      onChange: onChange,\n      values: values[\"e1\"],\n      errors: errors[\"e1\"],\n      errorMessages: errorMessages[\"e1\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Experience, {\n      id: \"e2\",\n      onChange: onChange,\n      values: values[\"e2\"],\n      errors: errors[\"e2\"],\n      errorMessages: errorMessages[\"e2\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Experience, {\n      id: \"e3\",\n      onChange: onChange,\n      values: values[\"e3\"],\n      errors: errors[\"e3\"],\n      errorMessages: errorMessages[\"e3\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Experience, {\n      id: \"e4\",\n      onChange: onChange,\n      values: values[\"e4\"],\n      errors: errors[\"e4\"],\n      errorMessages: errorMessages[\"e4\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavButtons, { ...props,\n      validateInfo: validateInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Experiences, \"xHDE/QYEITsjgPk6WrDgtbAzMkI=\");\n\n_c = Experiences;\nexport default Experiences;\n\nvar _c;\n\n$RefreshReg$(_c, \"Experiences\");","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/src/components/Experiences/Experiences.jsx"],"names":["React","NavButtons","Experience","Experiences","props","step","setStep","value","job","role","from","to","desc","error","errorMessage","values","setValues","useState","e1","e2","e3","e4","errors","setErrors","errorMessages","setErrorMessages","isValidated","setIsValidated","onChange","id","validateInfo","exp","newError","newErrorMessage","flag","key","length","handleNext","Object","includes","useEffect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport NavButtons from \"../NavButtons/NavButtons.jsx\";\nimport Experience from \"./Experience.jsx\";\n\nconst Experiences = (props) => {\n  const { step, setStep } = props;\n  const value = {\n    job: \"\",\n    role: \"\",\n    from: \"\",\n    to: \"\",\n    desc: \"\",\n  };\n  const error = {\n    job: false,\n    role: false,\n    from: false,\n    to: false,\n    desc: false,\n  };\n  const errorMessage = {\n    job: \"\",\n    role: \"\",\n    from: \"\",\n    to: \"\",\n    desc: \"\",\n  };\n  const [values, setValues] = React.useState({\n    e1: { ...value },\n    e2: { ...value },\n    e3: { ...value },\n    e4: { ...value },\n  });\n  const [errors, setErrors] = React.useState({\n    e1: { ...error },\n    e2: { ...error },\n    e3: { ...error },\n    e4: { ...error },\n  });\n  const [errorMessages, setErrorMessages] = React.useState({\n    e1: { ...errorMessage },\n    e2: { ...errorMessage },\n    e3: { ...errorMessage },\n    e4: { ...errorMessage },\n  });\n  const [isValidated, setIsValidated] = React.useState(false);\n\n  const onChange = (id, value) => {\n    values[id] = value;\n    setValues({ ...values });\n  };\n  const validateInfo = () => {\n    setIsValidated(false);\n\n    for (let exp in values) {\n      let newError = {\n        job: true,\n        role: true,\n        from: true,\n        to: true,\n        desc: true,\n      };\n      let newErrorMessage = {\n        job: \"Please provide complete info for this experience!\",\n        role: \"Please provide complete info for this experience!\",\n        from: \"Please provide complete info for this experience!\",\n        to: \"Please provide complete info for this experience!\",\n        desc: \"Please provide complete info for this experience!\",\n      };\n\n      let flag = false;\n      for (let key in values[exp]) {\n        if (values[exp][key].length) {\n          flag = true;\n          newError[key] = false;\n          newErrorMessage[key] = \"\";\n        }\n      }\n\n      if (flag) {\n        newError = {\n          job: false,\n          role: false,\n          from: false,\n          to: false,\n          desc: false,\n        };\n        newErrorMessage = {\n          job: \"\",\n          role: \"\",\n          from: \"\",\n          to: \"\",\n          desc: \"\",\n        };\n      }\n      errors[exp] = { ...newError };\n      errorMessages[exp] = { ...newErrorMessage };\n    }\n\n    setErrors({ ...errors });\n    setErrorMessages({ ...errorMessages });\n    setIsValidated(true);\n  };\n  const handleNext = () => {\n    let flag = false;\n    for (let error of Object.values(errors)) {\n      if (Object.values(error).includes(true)) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) setStep(step + 1);\n  };\n  React.useEffect(() => {\n    if (isValidated) handleNext();\n  }, [isValidated, handleNext]);\n\n  return (\n    <div>\n      <Experience\n        id=\"e1\"\n        onChange={onChange}\n        values={values[\"e1\"]}\n        errors={errors[\"e1\"]}\n        errorMessages={errorMessages[\"e1\"]}\n      />\n      <Experience\n        id=\"e2\"\n        onChange={onChange}\n        values={values[\"e2\"]}\n        errors={errors[\"e2\"]}\n        errorMessages={errorMessages[\"e2\"]}\n      />\n      <Experience\n        id=\"e3\"\n        onChange={onChange}\n        values={values[\"e3\"]}\n        errors={errors[\"e3\"]}\n        errorMessages={errorMessages[\"e3\"]}\n      />\n      <Experience\n        id=\"e4\"\n        onChange={onChange}\n        values={values[\"e4\"]}\n        errors={errors[\"e4\"]}\n        errorMessages={errorMessages[\"e4\"]}\n      />\n      <NavButtons {...props} validateInfo={validateInfo} />\n    </div>\n  );\n};\n\nexport default Experiences;\n"]},"metadata":{},"sourceType":"module"}