{"ast":null,"code":"'use strict';\n\nconst opentype = require('opentype.js');\n\nconst FontSubset = require('./subset');\n\nconst PDFName = require('../object/name');\n\nconst PDFObject = require('../object/object');\n\nconst PDFDictionary = require('../object/dictionary');\n\nconst PDFString = require('../object/string');\n\nconst PDFArray = require('../object/array');\n\nconst PDFStream = require('../object/stream');\n\nconst Base = require('./base');\n\nconst StringWidth = Base.StringWidth;\n\nconst util = require('../util');\n\nmodule.exports = class OTFFontFactory extends Base {\n  constructor(b) {\n    super(); // convert to array buffer\n\n    const ab = util.toArrayBuffer(b);\n    this.font = opentype.parse(ab);\n  }\n\n  instance() {\n    return new OTFFont(this.font, this);\n  }\n\n};\n\nclass OTFFont {\n  constructor(font, parent) {\n    this.font = font;\n    this.parent = parent;\n    this.subset = new FontSubset(this.font);\n    this.subset.use(' ');\n  }\n\n  encode(str) {\n    this.subset.use(str);\n    return new PDFString(this.subset.encode(str)).toHexString();\n  }\n\n  stringWidth(str, size) {\n    const scale = size / this.font.unitsPerEm;\n    const glyphs = this.font.stringToGlyphs(str);\n    const kerning = [];\n    let width = 0;\n\n    for (let i = 0, len = glyphs.length; i < len; ++i) {\n      const left = glyphs[i];\n      const right = glyphs[i + 1];\n      width += left.advanceWidth;\n\n      if (right) {\n        const offset = -this.font.getKerningValue(left, right);\n\n        if (offset !== 0) {\n          width += offset;\n          kerning.push({\n            pos: i + 1,\n            offset: offset\n          });\n        }\n      }\n    }\n\n    return new StringWidth(width * scale, kerning);\n  }\n\n  lineHeight(size, includeGap) {\n    if (includeGap == null) {\n      includeGap = false;\n    }\n\n    const gap = includeGap ? this.font.tables.os2.sTypoLineGap : 0;\n    const ascent = this.font.tables.os2.sTypoAscender;\n    const descent = this.font.tables.os2.sTypoDescender;\n    return (ascent + gap - descent) * size / this.font.unitsPerEm;\n  }\n\n  ascent(size) {\n    return this.font.tables.os2.sTypoAscender * size / this.font.unitsPerEm;\n  }\n\n  descent(size) {\n    return this.font.tables.os2.sTypoDescender * size / this.font.unitsPerEm;\n  }\n\n  underlinePosition(size) {\n    return this.font.tables.post.underlinePosition * size / this.font.unitsPerEm;\n  }\n\n  underlineThickness(size) {\n    return this.font.tables.post.underlineThickness * size / this.font.unitsPerEm;\n  }\n\n  async write(doc, fontObj) {\n    const head = this.font.tables.head;\n    const scaleFactor = 1000.0 / this.font.unitsPerEm;\n    let flags = 0;\n    const familyClass = (this.font.tables.os2.sFamilyClass || 0) >> 8;\n    const isSerif = !!~[1, 2, 3, 4, 5, 6, 7].indexOf(familyClass);\n    const isFixedPitch = this.font.tables.post.isFixedPitch;\n    const italicAngle = this.font.tables.post.italicAngle;\n    if (isFixedPitch) flags |= 1 << 0;\n    if (isSerif) flags |= 1 << 1;\n    if (familyClass === 10) flags |= 1 << 3;\n    if (italicAngle !== 0) flags |= 1 << 6;\n    /* assume not being symbolic */\n\n    flags |= 1 << 5; // font descriptor\n\n    const descriptor = new PDFObject('FontDescriptor');\n    descriptor.prop('FontName', this.subset.name);\n    descriptor.prop('Flags', flags);\n    descriptor.prop('FontBBox', new PDFArray([head.xMin * scaleFactor, head.yMin * scaleFactor, head.xMax * scaleFactor, head.yMax * scaleFactor]));\n    descriptor.prop('ItalicAngle', italicAngle);\n    descriptor.prop('Ascent', this.font.tables.os2.sTypoAscender * scaleFactor);\n    descriptor.prop('Descent', this.font.tables.os2.sTypoDescender * scaleFactor);\n    descriptor.prop('CapHeight', this.font.tables.os2.sCapHeight * scaleFactor);\n    descriptor.prop('XHeight', this.font.tables.os2.sxHeight * scaleFactor);\n    descriptor.prop('StemV', 0);\n    const descendant = new PDFObject('Font');\n    descendant.prop('Subtype', 'CIDFontType0');\n    descendant.prop('BaseFont', this.font.names.postScriptName.en);\n    descendant.prop('DW', 1000);\n    descendant.prop('CIDToGIDMap', 'Identity');\n    descendant.prop('CIDSystemInfo', new PDFDictionary({\n      'Ordering': new PDFString('Identity'),\n      'Registry': new PDFString('Adobe'),\n      'Supplement': 0\n    }));\n    descendant.prop('FontDescriptor', descriptor.toReference());\n    fontObj.prop('Subtype', 'Type0');\n    fontObj.prop('BaseFont', this.font.names.postScriptName.en);\n    fontObj.prop('Encoding', 'Identity-H');\n    fontObj.prop('DescendantFonts', new PDFArray([descendant.toReference()])); // widths array\n\n    const metrics = [],\n          codeMap = this.subset.cmap();\n\n    for (const code in codeMap) {\n      if (code < 32) {\n        continue;\n      }\n\n      const width = Math.round(this.subset.glyphs[code].advanceWidth * scaleFactor);\n      metrics.push(code - 31);\n      metrics.push(new PDFArray([width]));\n    }\n\n    descendant.prop('W', new PDFArray(metrics)); // unicode map\n\n    const cmap = new PDFStream();\n    cmap.writeLine('/CIDInit /ProcSet findresource begin');\n    cmap.writeLine('12 dict begin');\n    cmap.writeLine('begincmap');\n    cmap.writeLine('/CIDSystemInfo <<');\n    cmap.writeLine('  /Registry (Adobe)');\n    cmap.writeLine('  /Ordering (Identity)');\n    cmap.writeLine('  /Supplement 0');\n    cmap.writeLine('>> def');\n    cmap.writeLine('/CMapName /Identity-H');\n    cmap.writeLine('/CMapType 2 def');\n    cmap.writeLine('1 begincodespacerange');\n    cmap.writeLine('<0000><ffff>');\n    cmap.writeLine('endcodespacerange');\n    const mapping = this.subset.subset,\n          lines = [];\n\n    for (const code in mapping) {\n      if (code < 32) {\n        continue;\n      }\n\n      if (lines.length >= 100) {\n        cmap.writeLine(lines.length + ' beginbfchar');\n\n        for (let i = 0; i < lines.length; ++i) {\n          cmap.writeLine(lines[i]);\n        }\n\n        cmap.writeLine('endbfchar');\n        lines.length = 0;\n      }\n\n      lines.push('<' + ('0000' + (+code - 31).toString(16)).slice(-4) + '>' + // cid\n      '<' + ('0000' + mapping[code].toString(16)).slice(-4) + '>' // gid\n      );\n    }\n\n    if (lines.length) {\n      cmap.writeLine(lines.length + ' beginbfchar');\n      lines.forEach(function (line) {\n        cmap.writeLine(line);\n      });\n      cmap.writeLine('endbfchar');\n    }\n\n    cmap.writeLine('endcmap');\n    cmap.writeLine('CMapName currentdict /CMap defineresource pop');\n    cmap.writeLine('end');\n    cmap.writeLine('end');\n    fontObj.prop('ToUnicode', cmap.toReference()); // font file\n\n    const data = this.subset.save();\n    const hex = ab2hex(data);\n    const file = new PDFStream();\n    file.object.prop('Subtype', 'OpenType');\n    file.object.prop('Length', hex.length + 1);\n    file.object.prop('Length1', data.byteLength);\n    file.object.prop('Filter', 'ASCIIHexDecode');\n    file.content = hex + '>\\n';\n    descriptor.prop('FontFile3', file.toReference());\n    await doc._writeObject(file);\n    await doc._writeObject(descriptor);\n    await doc._writeObject(descendant);\n    await doc._writeObject(cmap);\n    await doc._writeObject(fontObj);\n  }\n\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nfunction ab2hex(ab) {\n  const view = new Uint8Array(ab);\n  let hex = '';\n\n  for (let i = 0, len = ab.byteLength; i < len; ++i) {\n    hex += toHex(view[i]);\n  }\n\n  return hex;\n}","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/lib/font/otf.js"],"names":["opentype","require","FontSubset","PDFName","PDFObject","PDFDictionary","PDFString","PDFArray","PDFStream","Base","StringWidth","util","module","exports","OTFFontFactory","constructor","b","ab","toArrayBuffer","font","parse","instance","OTFFont","parent","subset","use","encode","str","toHexString","stringWidth","size","scale","unitsPerEm","glyphs","stringToGlyphs","kerning","width","i","len","length","left","right","advanceWidth","offset","getKerningValue","push","pos","lineHeight","includeGap","gap","tables","os2","sTypoLineGap","ascent","sTypoAscender","descent","sTypoDescender","underlinePosition","post","underlineThickness","write","doc","fontObj","head","scaleFactor","flags","familyClass","sFamilyClass","isSerif","indexOf","isFixedPitch","italicAngle","descriptor","prop","name","xMin","yMin","xMax","yMax","sCapHeight","sxHeight","descendant","names","postScriptName","en","toReference","metrics","codeMap","cmap","code","Math","round","writeLine","mapping","lines","toString","slice","forEach","line","data","save","hex","ab2hex","file","object","byteLength","content","_writeObject","toHex","n","view","Uint8Array"],"mappings":"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","sourcesContent":["'use strict'\n\nconst opentype = require('opentype.js')\nconst FontSubset = require('./subset')\nconst PDFName = require('../object/name')\nconst PDFObject = require('../object/object')\nconst PDFDictionary = require('../object/dictionary')\nconst PDFString = require('../object/string')\nconst PDFArray = require('../object/array')\nconst PDFStream = require('../object/stream')\nconst Base = require('./base')\nconst StringWidth = Base.StringWidth\nconst util = require('../util')\n\nmodule.exports = class OTFFontFactory extends Base {\n  constructor(b) {\n    super()\n\n    // convert to array buffer\n    const ab = util.toArrayBuffer(b)\n    this.font = opentype.parse(ab)\n  }\n\n  instance() {\n    return new OTFFont(this.font, this)\n  }\n}\n\nclass OTFFont {\n  constructor(font, parent) {\n    this.font = font\n    this.parent = parent\n\n    this.subset = new FontSubset(this.font)\n    this.subset.use(' ')\n  }\n\n  encode(str) {\n    this.subset.use(str)\n    return (new PDFString(this.subset.encode(str))).toHexString()\n  }\n\n  stringWidth(str, size) {\n    const scale  = size / this.font.unitsPerEm\n    const glyphs = this.font.stringToGlyphs(str)\n    const kerning = []\n\n    let width = 0\n    for (let i = 0, len = glyphs.length; i < len; ++i) {\n      const left  = glyphs[i]\n      const right = glyphs[i + 1]\n\n      width += left.advanceWidth\n      if (right) {\n        const offset = -this.font.getKerningValue(left, right);\n\n        if (offset !== 0) {\n          width += offset\n          kerning.push({ pos: i + 1, offset: offset })\n        }\n      }\n    }\n\n    return new StringWidth(width * scale, kerning)\n  }\n\n  lineHeight(size, includeGap) {\n    if (includeGap == null) {\n      includeGap = false\n    }\n\n    const gap = includeGap ? this.font.tables.os2.sTypoLineGap : 0\n    const ascent = this.font.tables.os2.sTypoAscender\n    const descent = this.font.tables.os2.sTypoDescender\n\n    return (ascent + gap - descent) * size / this.font.unitsPerEm\n  }\n\n  ascent(size) {\n    return this.font.tables.os2.sTypoAscender * size / this.font.unitsPerEm\n  }\n\n  descent(size) {\n    return this.font.tables.os2.sTypoDescender * size / this.font.unitsPerEm\n  }\n\n  underlinePosition(size) {\n    return this.font.tables.post.underlinePosition * size / this.font.unitsPerEm\n  }\n\n  underlineThickness(size) {\n    return this.font.tables.post.underlineThickness * size / this.font.unitsPerEm\n  }\n\n  async write(doc, fontObj) {\n    const head = this.font.tables.head\n\n    const scaleFactor = 1000.0 / this.font.unitsPerEm\n\n    let flags = 0\n    const familyClass = (this.font.tables.os2.sFamilyClass || 0) >> 8\n    const isSerif = !!~[1, 2, 3, 4, 5, 6, 7].indexOf(familyClass)\n    const isFixedPitch = this.font.tables.post.isFixedPitch\n    const italicAngle = this.font.tables.post.italicAngle\n\n    if (isFixedPitch)                  flags |= 1 << 0\n    if (isSerif)                       flags |= 1 << 1\n    if (familyClass === 10)            flags |= 1 << 3\n    if (italicAngle !== 0)             flags |= 1 << 6\n    /* assume not being symbolic */    flags |= 1 << 5\n\n    // font descriptor\n    const descriptor = new PDFObject('FontDescriptor')\n    descriptor.prop('FontName', this.subset.name)\n    descriptor.prop('Flags', flags)\n    descriptor.prop('FontBBox', new PDFArray([\n      head.xMin * scaleFactor, head.yMin * scaleFactor,\n      head.xMax * scaleFactor, head.yMax * scaleFactor\n    ]))\n    descriptor.prop('ItalicAngle', italicAngle)\n    descriptor.prop('Ascent', this.font.tables.os2.sTypoAscender * scaleFactor)\n    descriptor.prop('Descent', this.font.tables.os2.sTypoDescender * scaleFactor)\n    descriptor.prop('CapHeight', this.font.tables.os2.sCapHeight * scaleFactor)\n    descriptor.prop('XHeight', this.font.tables.os2.sxHeight * scaleFactor)\n    descriptor.prop('StemV', 0)\n\n    const descendant = new PDFObject('Font')\n    descendant.prop('Subtype', 'CIDFontType0')\n    descendant.prop('BaseFont', this.font.names.postScriptName.en)\n    descendant.prop('DW', 1000)\n    descendant.prop('CIDToGIDMap', 'Identity')\n    descendant.prop('CIDSystemInfo', new PDFDictionary({\n      'Ordering':   new PDFString('Identity'),\n      'Registry':   new PDFString('Adobe'),\n      'Supplement': 0\n    }))\n    descendant.prop('FontDescriptor', descriptor.toReference())\n\n    fontObj.prop('Subtype', 'Type0')\n    fontObj.prop('BaseFont', this.font.names.postScriptName.en)\n    fontObj.prop('Encoding', 'Identity-H')\n    fontObj.prop('DescendantFonts', new PDFArray([descendant.toReference()]))\n\n    // widths array\n    const metrics = [], codeMap = this.subset.cmap()\n    for (const code in codeMap) {\n      if (code < 32) {\n        continue\n      }\n\n      const width = Math.round(this.subset.glyphs[code].advanceWidth * scaleFactor)\n      metrics.push(code - 31)\n      metrics.push(new PDFArray([width]))\n    }\n\n    descendant.prop('W', new PDFArray(metrics))\n\n    // unicode map\n    const cmap = new PDFStream()\n    cmap.writeLine('/CIDInit /ProcSet findresource begin')\n    cmap.writeLine('12 dict begin')\n    cmap.writeLine('begincmap')\n    cmap.writeLine('/CIDSystemInfo <<')\n    cmap.writeLine('  /Registry (Adobe)')\n    cmap.writeLine('  /Ordering (Identity)')\n    cmap.writeLine('  /Supplement 0')\n    cmap.writeLine('>> def')\n    cmap.writeLine('/CMapName /Identity-H')\n    cmap.writeLine('/CMapType 2 def')\n    cmap.writeLine('1 begincodespacerange')\n    cmap.writeLine('<0000><ffff>')\n    cmap.writeLine('endcodespacerange')\n\n    const mapping = this.subset.subset, lines = []\n    for (const code in mapping) {\n      if (code < 32) {\n        continue\n      }\n\n      if (lines.length >= 100) {\n        cmap.writeLine(lines.length + ' beginbfchar')\n        for (let i = 0; i < lines.length; ++i) {\n          cmap.writeLine(lines[i])\n        }\n        cmap.writeLine('endbfchar')\n        lines.length = 0\n      }\n\n      lines.push(\n        '<' + ('0000' + (+code - 31).toString(16)).slice(-4) + '>' + // cid\n        '<' + ('0000' + mapping[code].toString(16)).slice(-4) + '>'  // gid\n      )\n    }\n\n    if (lines.length) {\n      cmap.writeLine(lines.length + ' beginbfchar')\n      lines.forEach(function(line) {\n        cmap.writeLine(line)\n      })\n      cmap.writeLine('endbfchar')\n    }\n\n    cmap.writeLine('endcmap')\n    cmap.writeLine('CMapName currentdict /CMap defineresource pop')\n    cmap.writeLine('end')\n    cmap.writeLine('end')\n\n    fontObj.prop('ToUnicode', cmap.toReference())\n\n    // font file\n    const data = this.subset.save()\n    const hex = ab2hex(data)\n\n    const file = new PDFStream()\n    file.object.prop('Subtype', 'OpenType')\n    file.object.prop('Length', hex.length + 1)\n    file.object.prop('Length1', data.byteLength)\n    file.object.prop('Filter', 'ASCIIHexDecode')\n    file.content = hex + '>\\n'\n\n    descriptor.prop('FontFile3', file.toReference())\n\n    await doc._writeObject(file)\n    await doc._writeObject(descriptor)\n    await doc._writeObject(descendant)\n    await doc._writeObject(cmap)\n    await doc._writeObject(fontObj)\n  }\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction ab2hex(ab) {\n  const view = new Uint8Array(ab)\n  let hex = ''\n  for (let i = 0, len = ab.byteLength; i < len; ++i) {\n    hex += toHex(view[i])\n  }\n  return hex\n}\n"]},"metadata":{},"sourceType":"script"}