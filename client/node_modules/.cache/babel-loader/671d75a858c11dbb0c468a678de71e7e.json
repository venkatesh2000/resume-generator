{"ast":null,"code":"'use strict';\n\nconst Fragment = require('./fragment');\n\nconst util = require('./util');\n\nconst ops = require('./ops');\n\nconst PDF = require('./object');\n\nmodule.exports = class Table {\n  constructor(doc, parent, opts) {\n    Fragment.prototype._init.call(this, doc, parent);\n\n    this._cursor = this._cursor.clone();\n\n    if ('width' in opts) {\n      this._cursor.width = opts.width;\n    }\n\n    this._rowCount = 0;\n    this.widths = [];\n    applyOpts.call(this, opts);\n\n    if (this.borderVerticalWidths) {\n      this._cursor.width -= this.borderVerticalWidths[0] / 2;\n      this._cursor.startX += this.borderVerticalWidths[0] / 2;\n      this._cursor.width -= this.borderVerticalWidths[this.borderVerticalWidths.length - 1] / 2;\n    } // distribute remaining width among *-columns\n\n\n    let remainingWidth = this._cursor.width;\n    const distribute = [];\n\n    for (const i in this.widths) {\n      const w = this.widths[i];\n\n      if (!w || w === '*') {\n        distribute.push(i);\n      } else {\n        remainingWidth -= w;\n      }\n    }\n\n    if (distribute.length > 0) {\n      const w = remainingWidth / distribute.length;\n\n      for (const i of distribute) {\n        this.widths[i] = w;\n      }\n    }\n\n    this._header = null;\n  } /// private API\n\n\n  async _pageBreak(level, insideBreak) {\n    await Fragment.prototype._pageBreak.call(this, level);\n\n    if (!insideBreak) {\n      await this._renderHeader(true);\n    }\n  }\n\n  async _end() {\n    await Fragment.prototype._end.call(this);\n  }\n\n  _begin(ctx) {\n    Fragment.prototype._begin.call(this, ctx);\n  }\n\n  async _renderHeader(isPageBreak) {\n    if (!this._header) {\n      return;\n    }\n\n    if (!this._doc._currentContent) {\n      await this._doc._startPage();\n    }\n\n    let chunk = '';\n    const offset = this._cursor.y - this._header.startedAtY;\n\n    if (isPageBreak && offset !== 0) {\n      // offset header to the top\n      chunk += ops.q() + ops.cm(1, 0, 0, 1, 0, offset);\n    }\n\n    for (const obj of this._header._objects) {\n      const alias = new PDF.Name('TH' + obj.id);\n      this._doc._currentContent._xobjects[alias] = obj.toReference();\n      chunk += ops.Do(alias);\n    }\n\n    this._cursor.y -= this._header.height;\n\n    if (isPageBreak && offset !== 0) {\n      chunk += ops.Q();\n    }\n\n    await this._doc._write(chunk);\n  }\n\n  _row(opts, isHeader) {\n    if (!opts || typeof opts !== 'object') {\n      opts = {};\n    }\n\n    opts = Object.assign({\n      font: this._doc.defaultFont,\n      fontSize: this._doc.defaultFontSize,\n      color: this._doc.defaultColor,\n      lineHeight: this._doc.defaultLineHeight\n    }, this.opts, opts); // whitelist\n\n    opts = {\n      padding: opts.padding,\n      paddingLeft: opts.paddingLeft,\n      paddingRight: opts.paddingRight,\n      paddingTop: opts.paddingTop,\n      paddingBottom: opts.paddingBottom,\n      backgroundColor: opts.backgroundColor,\n      font: opts.font,\n      fontSize: opts.fontSize,\n      color: opts.color,\n      lineHeight: opts.lineHeight,\n      minHeight: opts.minHeight\n    };\n    const Row = isHeader ? require('./tableheader') : require('./row');\n    const ctx = new Row(this._doc, this, opts);\n\n    this._begin(ctx);\n\n    ctx._widths = this.widths.slice();\n    ctx._borderVerticalWidths = this.borderVerticalWidths && this.borderVerticalWidths.slice();\n    ctx._borderVerticalColors = this.borderVerticalColors && this.borderVerticalColors.slice();\n\n    if (this.borderHorizontalWidths) {\n      ctx._topBorderWidth = this.borderHorizontalWidths(this._rowCount);\n      ctx._topBorderColor = util.colorToRgb(this.borderHorizontalColors(this._rowCount));\n\n      if (!isHeader) {\n        ctx._bottomBorderWidth = this.borderHorizontalWidths(this._rowCount + 1);\n        ctx._bottomBorderColor = util.colorToRgb(this.borderHorizontalColors(this._rowCount + 1));\n      }\n\n      ctx._hasTopBorder = this._rowCount === (this._header ? 1 : 0);\n    }\n\n    ctx._pending.push(() => ctx._start());\n\n    this._pending.push(ctx._pending);\n\n    this._rowCount++;\n    return ctx;\n  } /// public API\n\n\n  end() {\n    return Fragment.prototype.end.call(this);\n  }\n\n  row(opts) {\n    return this._row(opts, false);\n  }\n\n  header(opts) {\n    if (this._header) {\n      throw new Error('The table already has a header, add additional rows to the existing table header instead');\n    }\n\n    const ctx = this._row(opts, true);\n\n    this._header = ctx;\n\n    this._pending.push(() => this._renderHeader());\n\n    return ctx;\n  }\n\n};\n\nfunction applyOpts(opts) {\n  this.opts = opts; // opts.width\n\n  if ('widths' in opts && Array.isArray(opts.widths)) {\n    this.widths = opts.widths;\n  } else {\n    throw new TypeError('widths (array) option is required for tables');\n  } // opts.borderVerticalWidths\n\n\n  this.borderVerticalWidths = null;\n\n  if (opts.borderVerticalWidths) {\n    if (!Array.isArray(opts.borderVerticalWidths)) {\n      throw new TypeError('borderVerticalWidths must be an array');\n    }\n\n    if (opts.borderVerticalWidths.length !== this.widths.length + 1) {\n      throw new TypeError(`wrong borderVerticalWidths length (expected ${this.widths.length + 1}; got ${opts.borderVerticalWidths.length})`);\n    }\n\n    this.borderVerticalWidths = opts.borderVerticalWidths;\n  } // opts.borderVerticalWidth\n  else if (typeof opts.borderVerticalWidth === 'number') {\n      this.borderVerticalWidths = [];\n\n      for (let i = 0; i <= this.widths.length; ++i) {\n        this.borderVerticalWidths.push(opts.borderVerticalWidth);\n      }\n    } // opts.borderVerticalColors\n\n\n  this.borderVerticalColors = null;\n\n  if (opts.borderVerticalColors) {\n    if (!Array.isArray(opts.borderVerticalColors)) {\n      throw new TypeError('borderVerticalColors must be an array');\n    }\n\n    if (opts.borderVerticalColors.length !== this.widths.length + 1) {\n      throw new TypeError(`wrong borderVerticalColors length (expected ${this.widths.length + 1}; got ${opts.borderVerticalColors.length})`);\n    }\n\n    this.borderVerticalColors = opts.borderVerticalColors.map(c => util.colorToRgb(c));\n  } // opts.borderVerticalColor\n  else if (typeof opts.borderVerticalColor === 'number') {\n      this.borderVerticalColors = [];\n      const color = util.colorToRgb(opts.borderVerticalColor);\n\n      for (let i = 0; i <= this.widths.length; ++i) {\n        this.borderVerticalColors.push(color);\n      }\n    } // opts.borderHorizontalWidths\n\n\n  this.borderHorizontalWidths = null;\n\n  if (opts.borderHorizontalWidths) {\n    if (typeof opts.borderHorizontalWidths !== 'function') {\n      throw new TypeError('borderHorizontalWidths must be a function');\n    }\n\n    this.borderHorizontalWidths = opts.borderHorizontalWidths;\n  } // opts.borderHorizontalWidth\n  else if (typeof opts.borderHorizontalWidth === 'number') {\n      this.borderHorizontalWidths = () => opts.borderHorizontalWidth;\n    } // opts.borderHorizontalColors\n\n\n  this.borderHorizontalColors = null;\n\n  if (opts.borderHorizontalColors) {\n    if (typeof opts.borderHorizontalColors !== 'function') {\n      throw new TypeError('borderHorizontalColors must be a function');\n    }\n\n    this.borderHorizontalColors = opts.borderHorizontalColors;\n  } // opts.borderHorizontalColor\n  else if (typeof opts.borderHorizontalColor === 'number') {\n      this.borderHorizontalColors = () => opts.borderHorizontalColor;\n    } // opts.borderWidth\n\n\n  const borderWidth = opts.borderWidth || 0;\n\n  if (borderWidth > 0) {\n    if (!this.borderVerticalWidths) {\n      this.borderVerticalWidths = [];\n\n      for (let i = 0; i <= this.widths.length; ++i) {\n        this.borderVerticalWidths.push(borderWidth);\n      }\n    }\n\n    if (!this.borderHorizontalWidths) {\n      this.borderHorizontalWidths = () => borderWidth;\n    }\n  } // opts.borderColor\n\n\n  const borderColor = opts.borderColor || 0x000000;\n\n  if (!this.borderVerticalColors) {\n    this.borderVerticalColors = [];\n\n    for (let i = 0; i <= this.widths.length; ++i) {\n      this.borderVerticalColors.push(util.colorToRgb(borderColor));\n    }\n  }\n\n  if (!this.borderHorizontalColors) {\n    this.borderHorizontalColors = () => borderColor;\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/lib/table.js"],"names":["Fragment","require","util","ops","PDF","module","exports","Table","constructor","doc","parent","opts","prototype","_init","call","_cursor","clone","width","_rowCount","widths","applyOpts","borderVerticalWidths","startX","length","remainingWidth","distribute","i","w","push","_header","_pageBreak","level","insideBreak","_renderHeader","_end","_begin","ctx","isPageBreak","_doc","_currentContent","_startPage","chunk","offset","y","startedAtY","q","cm","obj","_objects","alias","Name","id","_xobjects","toReference","Do","height","Q","_write","_row","isHeader","Object","assign","font","defaultFont","fontSize","defaultFontSize","color","defaultColor","lineHeight","defaultLineHeight","padding","paddingLeft","paddingRight","paddingTop","paddingBottom","backgroundColor","minHeight","Row","_widths","slice","_borderVerticalWidths","_borderVerticalColors","borderVerticalColors","borderHorizontalWidths","_topBorderWidth","_topBorderColor","colorToRgb","borderHorizontalColors","_bottomBorderWidth","_bottomBorderColor","_hasTopBorder","_pending","_start","end","row","header","Error","Array","isArray","TypeError","borderVerticalWidth","map","c","borderVerticalColor","borderHorizontalWidth","borderHorizontalColor","borderWidth","borderColor"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Fragment = require('./fragment')\nconst util = require('./util')\nconst ops = require('./ops')\nconst PDF = require('./object')\n\nmodule.exports = class Table {\n  constructor(doc, parent, opts) {\n    Fragment.prototype._init.call(this, doc, parent)\n\n    this._cursor = this._cursor.clone()\n    if ('width' in opts) {\n      this._cursor.width = opts.width\n    }\n\n    this._rowCount = 0\n    this.widths = []\n\n    applyOpts.call(this, opts)\n\n    if (this.borderVerticalWidths) {\n      this._cursor.width -= this.borderVerticalWidths[0] / 2\n      this._cursor.startX += this.borderVerticalWidths[0] / 2\n      this._cursor.width -= this.borderVerticalWidths[this.borderVerticalWidths.length - 1] / 2\n    }\n\n    // distribute remaining width among *-columns\n    let remainingWidth = this._cursor.width\n    const distribute = []\n\n    for (const i in this.widths) {\n      const w = this.widths[i]\n      if (!w || w === '*') {\n        distribute.push(i)\n      } else {\n        remainingWidth -= w\n      }\n    }\n\n    if (distribute.length > 0) {\n      const w = remainingWidth / distribute.length\n\n      for (const i of distribute) {\n        this.widths[i] = w\n      }\n    }\n\n    this._header = null\n  }\n\n  /// private API\n\n  async _pageBreak(level, insideBreak) {\n    await Fragment.prototype._pageBreak.call(this, level)\n\n    if (!insideBreak) {\n      await this._renderHeader(true)\n    }\n  }\n\n  async _end() {\n    await Fragment.prototype._end.call(this)\n  }\n\n  _begin(ctx) {\n    Fragment.prototype._begin.call(this, ctx)\n  }\n\n  async _renderHeader(isPageBreak) {\n    if (!this._header) {\n      return\n    }\n\n    if (!this._doc._currentContent) {\n      await this._doc._startPage()\n    }\n\n    let chunk = ''\n\n    const offset = this._cursor.y - this._header.startedAtY\n\n    if (isPageBreak && offset !== 0) {\n      // offset header to the top\n      chunk += ops.q()\n             + ops.cm(1, 0, 0, 1, 0, offset)\n    }\n\n    for (const obj of this._header._objects) {\n      const alias = new PDF.Name('TH' + obj.id)\n      this._doc._currentContent._xobjects[alias] = obj.toReference()\n      chunk += ops.Do(alias)\n    }\n\n    this._cursor.y -= this._header.height\n\n    if (isPageBreak && offset !== 0) {\n      chunk += ops.Q()\n    }\n\n    await this._doc._write(chunk)\n\n  }\n\n  _row(opts, isHeader) {\n    if (!opts || typeof opts !== 'object') {\n      opts = {}\n    }\n\n    opts = Object.assign({\n      font: this._doc.defaultFont,\n      fontSize: this._doc.defaultFontSize,\n      color: this._doc.defaultColor,\n      lineHeight: this._doc.defaultLineHeight,\n    }, this.opts, opts)\n\n    // whitelist\n    opts = {\n      padding: opts.padding,\n      paddingLeft: opts.paddingLeft,\n      paddingRight: opts.paddingRight,\n      paddingTop: opts.paddingTop,\n      paddingBottom: opts.paddingBottom,\n      backgroundColor: opts.backgroundColor,\n      font: opts.font,\n      fontSize: opts.fontSize,\n      color: opts.color,\n      lineHeight: opts.lineHeight,\n      minHeight: opts.minHeight,\n    }\n\n    const Row = isHeader ? require('./tableheader') : require('./row')\n    const ctx = new Row(this._doc, this, opts)\n    this._begin(ctx)\n\n    ctx._widths = this.widths.slice()\n    ctx._borderVerticalWidths = this.borderVerticalWidths && this.borderVerticalWidths.slice()\n    ctx._borderVerticalColors = this.borderVerticalColors && this.borderVerticalColors.slice()\n\n    if (this.borderHorizontalWidths) {\n      ctx._topBorderWidth = this.borderHorizontalWidths(this._rowCount)\n      ctx._topBorderColor = util.colorToRgb(this.borderHorizontalColors(this._rowCount))\n\n      if (!isHeader) {\n        ctx._bottomBorderWidth = this.borderHorizontalWidths(this._rowCount + 1)\n        ctx._bottomBorderColor = util.colorToRgb(this.borderHorizontalColors(this._rowCount + 1))\n      }\n\n      ctx._hasTopBorder = this._rowCount === (this._header ? 1 : 0)\n    }\n\n    ctx._pending.push(() => ctx._start())\n    this._pending.push(ctx._pending)\n\n    this._rowCount++\n\n    return ctx\n  }\n\n  /// public API\n\n  end() {\n    return Fragment.prototype.end.call(this)\n  }\n\n  row(opts) {\n    return this._row(opts, false)\n  }\n\n  header(opts) {\n    if (this._header) {\n      throw new Error('The table already has a header, add additional rows to the existing table header instead')\n    }\n    const ctx = this._row(opts, true)\n    this._header = ctx\n    this._pending.push(() => this._renderHeader())\n    return ctx\n  }\n}\n\nfunction applyOpts(opts) {\n  this.opts = opts\n\n  // opts.width\n  if ('widths' in opts && Array.isArray(opts.widths)) {\n    this.widths = opts.widths\n  } else {\n    throw new TypeError('widths (array) option is required for tables')\n  }\n\n  // opts.borderVerticalWidths\n  this.borderVerticalWidths = null\n  if (opts.borderVerticalWidths) {\n    if (!Array.isArray(opts.borderVerticalWidths)) {\n      throw new TypeError('borderVerticalWidths must be an array')\n    }\n\n    if (opts.borderVerticalWidths.length !== this.widths.length + 1) {\n      throw new TypeError(`wrong borderVerticalWidths length (expected ${this.widths.length + 1}; got ${opts.borderVerticalWidths.length})`)\n    }\n\n    this.borderVerticalWidths = opts.borderVerticalWidths\n  }\n  // opts.borderVerticalWidth\n  else if (typeof opts.borderVerticalWidth === 'number') {\n    this.borderVerticalWidths = []\n    for (let i = 0; i <= this.widths.length; ++i) {\n      this.borderVerticalWidths.push(opts.borderVerticalWidth)\n    }\n  }\n\n  // opts.borderVerticalColors\n  this.borderVerticalColors = null\n  if (opts.borderVerticalColors) {\n    if (!Array.isArray(opts.borderVerticalColors)) {\n      throw new TypeError('borderVerticalColors must be an array')\n    }\n\n    if (opts.borderVerticalColors.length !== this.widths.length + 1) {\n      throw new TypeError(`wrong borderVerticalColors length (expected ${this.widths.length + 1}; got ${opts.borderVerticalColors.length})`)\n    }\n\n    this.borderVerticalColors = opts.borderVerticalColors.map(c => util.colorToRgb(c))\n  }\n  // opts.borderVerticalColor\n  else if (typeof opts.borderVerticalColor === 'number') {\n    this.borderVerticalColors = []\n    const color = util.colorToRgb(opts.borderVerticalColor)\n    for (let i = 0; i <= this.widths.length; ++i) {\n      this.borderVerticalColors.push(color)\n    }\n  }\n\n  // opts.borderHorizontalWidths\n  this.borderHorizontalWidths = null\n  if (opts.borderHorizontalWidths) {\n    if (typeof opts.borderHorizontalWidths !== 'function') {\n      throw new TypeError('borderHorizontalWidths must be a function')\n    }\n\n    this.borderHorizontalWidths = opts.borderHorizontalWidths\n  }\n  // opts.borderHorizontalWidth\n  else if (typeof opts.borderHorizontalWidth === 'number') {\n    this.borderHorizontalWidths = () => opts.borderHorizontalWidth\n  }\n\n  // opts.borderHorizontalColors\n  this.borderHorizontalColors = null\n  if (opts.borderHorizontalColors) {\n    if (typeof opts.borderHorizontalColors !== 'function') {\n      throw new TypeError('borderHorizontalColors must be a function')\n    }\n\n    this.borderHorizontalColors = opts.borderHorizontalColors\n  }\n  // opts.borderHorizontalColor\n  else if (typeof opts.borderHorizontalColor === 'number') {\n    this.borderHorizontalColors = () => opts.borderHorizontalColor\n  }\n\n  // opts.borderWidth\n  const borderWidth = opts.borderWidth || 0\n  if (borderWidth > 0) {\n    if (!this.borderVerticalWidths) {\n      this.borderVerticalWidths = []\n      for (let i = 0; i <= this.widths.length; ++i) {\n        this.borderVerticalWidths.push(borderWidth)\n      }\n    }\n\n    if (!this.borderHorizontalWidths) {\n      this.borderHorizontalWidths = () => borderWidth\n    }\n  }\n\n  // opts.borderColor\n  const borderColor = opts.borderColor || 0x000000\n  if (!this.borderVerticalColors) {\n    this.borderVerticalColors = []\n    for (let i = 0; i <= this.widths.length; ++i) {\n      this.borderVerticalColors.push(util.colorToRgb(borderColor))\n    }\n  }\n\n  if (!this.borderHorizontalColors) {\n    this.borderHorizontalColors = () => borderColor\n  }\n}"]},"metadata":{},"sourceType":"script"}