{"ast":null,"code":"const Objects = [];\n\nexports.parse = function (xref, lexer) {\n  // lazy load, cause circular referecnes\n  if (!Objects.length) {\n    Objects.push.apply(Objects, [require('./boolean'), require('./null'), require('./name'), require('./dictionary'), // must be tried before string!\n    require('./string'), require('./array'), require('./reference'), // must be tried before number!\n    require('./number')]);\n  } // try\n\n\n  for (let i = 0; i < Objects.length; ++i) {\n    const value = Objects[i].parse(xref, lexer, true);\n\n    if (value !== undefined) {\n      return value;\n    }\n  }\n\n  lexer._error('Invalid value');\n\n  return undefined;\n};","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/lib/object/value.js"],"names":["Objects","exports","parse","xref","lexer","length","push","apply","require","i","value","undefined","_error"],"mappings":"AAAA,MAAMA,OAAO,GAAG,EAAhB;;AAEAC,OAAO,CAACC,KAAR,GAAgB,UAASC,IAAT,EAAeC,KAAf,EAAsB;AACpC;AACA,MAAI,CAACJ,OAAO,CAACK,MAAb,EAAqB;AACnBL,IAAAA,OAAO,CAACM,IAAR,CAAaC,KAAb,CAAmBP,OAAnB,EAA4B,CAC1BQ,OAAO,CAAC,WAAD,CADmB,EAE1BA,OAAO,CAAC,QAAD,CAFmB,EAG1BA,OAAO,CAAC,QAAD,CAHmB,EAI1BA,OAAO,CAAC,cAAD,CAJmB,EAID;AACzBA,IAAAA,OAAO,CAAC,UAAD,CALmB,EAM1BA,OAAO,CAAC,SAAD,CANmB,EAO1BA,OAAO,CAAC,aAAD,CAPmB,EAOF;AACxBA,IAAAA,OAAO,CAAC,UAAD,CARmB,CAA5B;AAUD,GAbmC,CAepC;;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACK,MAA5B,EAAoC,EAAEI,CAAtC,EAAyC;AACvC,UAAMC,KAAK,GAAGV,OAAO,CAACS,CAAD,CAAP,CAAWP,KAAX,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B,IAA9B,CAAd;;AACA,QAAIM,KAAK,KAAKC,SAAd,EAAyB;AACvB,aAAOD,KAAP;AACD;AACF;;AAEDN,EAAAA,KAAK,CAACQ,MAAN,CAAa,eAAb;;AACA,SAAOD,SAAP;AACD,CAzBD","sourcesContent":["const Objects = []\n\nexports.parse = function(xref, lexer) {\n  // lazy load, cause circular referecnes\n  if (!Objects.length) {\n    Objects.push.apply(Objects, [\n      require('./boolean'),\n      require('./null'),\n      require('./name'),\n      require('./dictionary'), // must be tried before string!\n      require('./string'),\n      require('./array'),\n      require('./reference'), // must be tried before number!\n      require('./number')\n    ])\n  }\n\n  // try\n  for (let i = 0; i < Objects.length; ++i) {\n    const value = Objects[i].parse(xref, lexer, true)\n    if (value !== undefined) {\n      return value\n    }\n  }\n\n  lexer._error('Invalid value')\n  return undefined\n}\n"]},"metadata":{},"sourceType":"script"}