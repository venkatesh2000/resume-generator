{"ast":null,"code":"'use strict';\n\nconst zlib_inflate = require('./zlib/inflate');\n\nconst utils = require('./utils/common');\n\nconst strings = require('./utils/strings');\n\nconst msg = require('./zlib/messages');\n\nconst ZStream = require('./zlib/zstream');\n\nconst GZheader = require('./zlib/gzheader');\n\nconst toString = Object.prototype.toString;\n/* Public constants ==========================================================*/\n\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH,\n  Z_FINISH,\n  Z_OK,\n  Z_STREAM_END,\n  Z_NEED_DICT,\n  Z_STREAM_ERROR,\n  Z_DATA_ERROR,\n  Z_MEM_ERROR\n} = require('./zlib/constants');\n/* ===========================================================================*/\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\n\n\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n  const opt = this.options; // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n\n  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {\n    opt.windowBits = -opt.windowBits;\n\n    if (opt.windowBits === 0) {\n      opt.windowBits = -15;\n    }\n  } // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n\n\n  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  } // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n\n\n  if (opt.windowBits > 15 && opt.windowBits < 48) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err = 0; // error code, if happens (0 = Z_OK)\n\n  this.msg = ''; // error message\n\n  this.ended = false; // used to avoid multiple onEnd() calls\n\n  this.chunks = []; // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n  let status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n  zlib_inflate.inflateGetHeader(this.strm, this.header); // Setup dictionary\n\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n\n    if (opt.raw) {\n      //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\n\n\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH; // Convert data if needed\n\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    } // Skip snyc markers if more data follows and not raw mode\n\n\n    while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0) {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    } // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n\n\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n        if (this.options.to === 'string') {\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8); // move tail & realign counters\n\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n          this.onData(utf8str);\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    } // Must repeat iteration if out buffer is full\n\n\n    if (status === Z_OK && last_avail_out === 0) continue; // Finalize if end of stream reached.\n\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\n\n\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\n\n\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\n\n\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n  inflator.push(input); // That will never happens, if you don't cheat with options :)\n\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n  return inflator.result;\n}\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\n\n\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = require('./zlib/constants');","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/node_modules/pako/lib/inflate.js"],"names":["zlib_inflate","require","utils","strings","msg","ZStream","GZheader","toString","Object","prototype","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Inflate","options","assign","chunkSize","windowBits","to","opt","raw","err","ended","chunks","strm","avail_out","status","inflateInit2","Error","header","inflateGetHeader","dictionary","string2buf","call","Uint8Array","inflateSetDictionary","push","data","flush_mode","_flush_mode","last_avail_out","input","next_in","avail_in","length","output","next_out","inflate","state","wrap","inflateReset","onEnd","next_out_utf8","utf8border","tail","utf8str","buf2string","set","subarray","onData","inflateEnd","chunk","result","join","flattenChunks","inflator","inflateRaw","module","exports","ungzip","constants"],"mappings":"AAAA;;AAGA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMC,KAAK,GAAUD,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAME,OAAO,GAAQF,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAMG,GAAG,GAAYH,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAMI,OAAO,GAAQJ,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMK,QAAQ,GAAOL,OAAO,CAAC,iBAAD,CAA5B;;AAEA,MAAMM,QAAQ,GAAGC,MAAM,CAACC,SAAP,CAAiBF,QAAlC;AAEA;;AACA;;AAEA,MAAM;AACJG,EAAAA,UADI;AACQC,EAAAA,QADR;AAEJC,EAAAA,IAFI;AAEEC,EAAAA,YAFF;AAEgBC,EAAAA,WAFhB;AAE6BC,EAAAA,cAF7B;AAE6CC,EAAAA,YAF7C;AAE2DC,EAAAA;AAF3D,IAGFhB,OAAO,CAAC,kBAAD,CAHX;AAKA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiB,OAAT,CAAiBC,OAAjB,EAA0B;AACxB,OAAKA,OAAL,GAAejB,KAAK,CAACkB,MAAN,CAAa;AAC1BC,IAAAA,SAAS,EAAE,OAAO,EADQ;AAE1BC,IAAAA,UAAU,EAAE,EAFc;AAG1BC,IAAAA,EAAE,EAAE;AAHsB,GAAb,EAIZJ,OAAO,IAAI,EAJC,CAAf;AAMA,QAAMK,GAAG,GAAG,KAAKL,OAAjB,CAPwB,CASxB;AACA;;AACA,MAAIK,GAAG,CAACC,GAAJ,IAAYD,GAAG,CAACF,UAAJ,IAAkB,CAA9B,IAAqCE,GAAG,CAACF,UAAJ,GAAiB,EAA1D,EAA+D;AAC7DE,IAAAA,GAAG,CAACF,UAAJ,GAAiB,CAACE,GAAG,CAACF,UAAtB;;AACA,QAAIE,GAAG,CAACF,UAAJ,KAAmB,CAAvB,EAA0B;AAAEE,MAAAA,GAAG,CAACF,UAAJ,GAAiB,CAAC,EAAlB;AAAuB;AACpD,GAduB,CAgBxB;;;AACA,MAAKE,GAAG,CAACF,UAAJ,IAAkB,CAAnB,IAA0BE,GAAG,CAACF,UAAJ,GAAiB,EAA3C,IACA,EAAEH,OAAO,IAAIA,OAAO,CAACG,UAArB,CADJ,EACsC;AACpCE,IAAAA,GAAG,CAACF,UAAJ,IAAkB,EAAlB;AACD,GApBuB,CAsBxB;AACA;;;AACA,MAAKE,GAAG,CAACF,UAAJ,GAAiB,EAAlB,IAA0BE,GAAG,CAACF,UAAJ,GAAiB,EAA/C,EAAoD;AAClD;AACA;AACA,QAAI,CAACE,GAAG,CAACF,UAAJ,GAAiB,EAAlB,MAA0B,CAA9B,EAAiC;AAC/BE,MAAAA,GAAG,CAACF,UAAJ,IAAkB,EAAlB;AACD;AACF;;AAED,OAAKI,GAAL,GAAc,CAAd,CAhCwB,CAgCF;;AACtB,OAAKtB,GAAL,GAAc,EAAd,CAjCwB,CAiCF;;AACtB,OAAKuB,KAAL,GAAc,KAAd,CAlCwB,CAkCF;;AACtB,OAAKC,MAAL,GAAc,EAAd,CAnCwB,CAmCF;;AAEtB,OAAKC,IAAL,GAAc,IAAIxB,OAAJ,EAAd;AACA,OAAKwB,IAAL,CAAUC,SAAV,GAAsB,CAAtB;AAEA,MAAIC,MAAM,GAAI/B,YAAY,CAACgC,YAAb,CACZ,KAAKH,IADO,EAEZL,GAAG,CAACF,UAFQ,CAAd;;AAKA,MAAIS,MAAM,KAAKnB,IAAf,EAAqB;AACnB,UAAM,IAAIqB,KAAJ,CAAU7B,GAAG,CAAC2B,MAAD,CAAb,CAAN;AACD;;AAED,OAAKG,MAAL,GAAc,IAAI5B,QAAJ,EAAd;AAEAN,EAAAA,YAAY,CAACmC,gBAAb,CAA8B,KAAKN,IAAnC,EAAyC,KAAKK,MAA9C,EAnDwB,CAqDxB;;AACA,MAAIV,GAAG,CAACY,UAAR,EAAoB;AAClB;AACA,QAAI,OAAOZ,GAAG,CAACY,UAAX,KAA0B,QAA9B,EAAwC;AACtCZ,MAAAA,GAAG,CAACY,UAAJ,GAAiBjC,OAAO,CAACkC,UAAR,CAAmBb,GAAG,CAACY,UAAvB,CAAjB;AACD,KAFD,MAEO,IAAI7B,QAAQ,CAAC+B,IAAT,CAAcd,GAAG,CAACY,UAAlB,MAAkC,sBAAtC,EAA8D;AACnEZ,MAAAA,GAAG,CAACY,UAAJ,GAAiB,IAAIG,UAAJ,CAAef,GAAG,CAACY,UAAnB,CAAjB;AACD;;AACD,QAAIZ,GAAG,CAACC,GAAR,EAAa;AAAE;AACbM,MAAAA,MAAM,GAAG/B,YAAY,CAACwC,oBAAb,CAAkC,KAAKX,IAAvC,EAA6CL,GAAG,CAACY,UAAjD,CAAT;;AACA,UAAIL,MAAM,KAAKnB,IAAf,EAAqB;AACnB,cAAM,IAAIqB,KAAJ,CAAU7B,GAAG,CAAC2B,MAAD,CAAb,CAAN;AACD;AACF;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAb,OAAO,CAACT,SAAR,CAAkBgC,IAAlB,GAAyB,UAAUC,IAAV,EAAgBC,UAAhB,EAA4B;AACnD,QAAMd,IAAI,GAAG,KAAKA,IAAlB;AACA,QAAMR,SAAS,GAAG,KAAKF,OAAL,CAAaE,SAA/B;AACA,QAAMe,UAAU,GAAG,KAAKjB,OAAL,CAAaiB,UAAhC;;AACA,MAAIL,MAAJ,EAAYa,WAAZ,EAAyBC,cAAzB;;AAEA,MAAI,KAAKlB,KAAT,EAAgB,OAAO,KAAP;AAEhB,MAAIgB,UAAU,KAAK,CAAC,CAACA,UAArB,EAAiCC,WAAW,GAAGD,UAAd,CAAjC,KACKC,WAAW,GAAGD,UAAU,KAAK,IAAf,GAAsBhC,QAAtB,GAAiCD,UAA/C,CAT8C,CAWnD;;AACA,MAAIH,QAAQ,CAAC+B,IAAT,CAAcI,IAAd,MAAwB,sBAA5B,EAAoD;AAClDb,IAAAA,IAAI,CAACiB,KAAL,GAAa,IAAIP,UAAJ,CAAeG,IAAf,CAAb;AACD,GAFD,MAEO;AACLb,IAAAA,IAAI,CAACiB,KAAL,GAAaJ,IAAb;AACD;;AAEDb,EAAAA,IAAI,CAACkB,OAAL,GAAe,CAAf;AACAlB,EAAAA,IAAI,CAACmB,QAAL,GAAgBnB,IAAI,CAACiB,KAAL,CAAWG,MAA3B;;AAEA,WAAS;AACP,QAAIpB,IAAI,CAACC,SAAL,KAAmB,CAAvB,EAA0B;AACxBD,MAAAA,IAAI,CAACqB,MAAL,GAAc,IAAIX,UAAJ,CAAelB,SAAf,CAAd;AACAQ,MAAAA,IAAI,CAACsB,QAAL,GAAgB,CAAhB;AACAtB,MAAAA,IAAI,CAACC,SAAL,GAAiBT,SAAjB;AACD;;AAEDU,IAAAA,MAAM,GAAG/B,YAAY,CAACoD,OAAb,CAAqBvB,IAArB,EAA2Be,WAA3B,CAAT;;AAEA,QAAIb,MAAM,KAAKjB,WAAX,IAA0BsB,UAA9B,EAA0C;AACxCL,MAAAA,MAAM,GAAG/B,YAAY,CAACwC,oBAAb,CAAkCX,IAAlC,EAAwCO,UAAxC,CAAT;;AAEA,UAAIL,MAAM,KAAKnB,IAAf,EAAqB;AACnBmB,QAAAA,MAAM,GAAG/B,YAAY,CAACoD,OAAb,CAAqBvB,IAArB,EAA2Be,WAA3B,CAAT;AACD,OAFD,MAEO,IAAIb,MAAM,KAAKf,YAAf,EAA6B;AAClC;AACAe,QAAAA,MAAM,GAAGjB,WAAT;AACD;AACF,KAlBM,CAoBP;;;AACA,WAAOe,IAAI,CAACmB,QAAL,GAAgB,CAAhB,IACAjB,MAAM,KAAKlB,YADX,IAEAgB,IAAI,CAACwB,KAAL,CAAWC,IAAX,GAAkB,CAFlB,IAGAZ,IAAI,CAACb,IAAI,CAACkB,OAAN,CAAJ,KAAuB,CAH9B,EAIA;AACE/C,MAAAA,YAAY,CAACuD,YAAb,CAA0B1B,IAA1B;AACAE,MAAAA,MAAM,GAAG/B,YAAY,CAACoD,OAAb,CAAqBvB,IAArB,EAA2Be,WAA3B,CAAT;AACD;;AAED,YAAQb,MAAR;AACE,WAAKhB,cAAL;AACA,WAAKC,YAAL;AACA,WAAKF,WAAL;AACA,WAAKG,WAAL;AACE,aAAKuC,KAAL,CAAWzB,MAAX;AACA,aAAKJ,KAAL,GAAa,IAAb;AACA,eAAO,KAAP;AAPJ,KA9BO,CAwCP;AACA;;;AACAkB,IAAAA,cAAc,GAAGhB,IAAI,CAACC,SAAtB;;AAEA,QAAID,IAAI,CAACsB,QAAT,EAAmB;AACjB,UAAItB,IAAI,CAACC,SAAL,KAAmB,CAAnB,IAAwBC,MAAM,KAAKlB,YAAvC,EAAqD;AAEnD,YAAI,KAAKM,OAAL,CAAaI,EAAb,KAAoB,QAAxB,EAAkC;AAEhC,cAAIkC,aAAa,GAAGtD,OAAO,CAACuD,UAAR,CAAmB7B,IAAI,CAACqB,MAAxB,EAAgCrB,IAAI,CAACsB,QAArC,CAApB;AAEA,cAAIQ,IAAI,GAAG9B,IAAI,CAACsB,QAAL,GAAgBM,aAA3B;AACA,cAAIG,OAAO,GAAGzD,OAAO,CAAC0D,UAAR,CAAmBhC,IAAI,CAACqB,MAAxB,EAAgCO,aAAhC,CAAd,CALgC,CAOhC;;AACA5B,UAAAA,IAAI,CAACsB,QAAL,GAAgBQ,IAAhB;AACA9B,UAAAA,IAAI,CAACC,SAAL,GAAiBT,SAAS,GAAGsC,IAA7B;AACA,cAAIA,IAAJ,EAAU9B,IAAI,CAACqB,MAAL,CAAYY,GAAZ,CAAgBjC,IAAI,CAACqB,MAAL,CAAYa,QAAZ,CAAqBN,aAArB,EAAoCA,aAAa,GAAGE,IAApD,CAAhB,EAA2E,CAA3E;AAEV,eAAKK,MAAL,CAAYJ,OAAZ;AAED,SAdD,MAcO;AACL,eAAKI,MAAL,CAAYnC,IAAI,CAACqB,MAAL,CAAYD,MAAZ,KAAuBpB,IAAI,CAACsB,QAA5B,GAAuCtB,IAAI,CAACqB,MAA5C,GAAqDrB,IAAI,CAACqB,MAAL,CAAYa,QAAZ,CAAqB,CAArB,EAAwBlC,IAAI,CAACsB,QAA7B,CAAjE;AACD;AACF;AACF,KAjEM,CAmEP;;;AACA,QAAIpB,MAAM,KAAKnB,IAAX,IAAmBiC,cAAc,KAAK,CAA1C,EAA6C,SApEtC,CAsEP;;AACA,QAAId,MAAM,KAAKlB,YAAf,EAA6B;AAC3BkB,MAAAA,MAAM,GAAG/B,YAAY,CAACiE,UAAb,CAAwB,KAAKpC,IAA7B,CAAT;AACA,WAAK2B,KAAL,CAAWzB,MAAX;AACA,WAAKJ,KAAL,GAAa,IAAb;AACA,aAAO,IAAP;AACD;;AAED,QAAIE,IAAI,CAACmB,QAAL,KAAkB,CAAtB,EAAyB;AAC1B;;AAED,SAAO,IAAP;AACD,CAvGD;AA0GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9B,OAAO,CAACT,SAAR,CAAkBuD,MAAlB,GAA2B,UAAUE,KAAV,EAAiB;AAC1C,OAAKtC,MAAL,CAAYa,IAAZ,CAAiByB,KAAjB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhD,OAAO,CAACT,SAAR,CAAkB+C,KAAlB,GAA0B,UAAUzB,MAAV,EAAkB;AAC1C;AACA,MAAIA,MAAM,KAAKnB,IAAf,EAAqB;AACnB,QAAI,KAAKO,OAAL,CAAaI,EAAb,KAAoB,QAAxB,EAAkC;AAChC,WAAK4C,MAAL,GAAc,KAAKvC,MAAL,CAAYwC,IAAZ,CAAiB,EAAjB,CAAd;AACD,KAFD,MAEO;AACL,WAAKD,MAAL,GAAcjE,KAAK,CAACmE,aAAN,CAAoB,KAAKzC,MAAzB,CAAd;AACD;AACF;;AACD,OAAKA,MAAL,GAAc,EAAd;AACA,OAAKF,GAAL,GAAWK,MAAX;AACA,OAAK3B,GAAL,GAAW,KAAKyB,IAAL,CAAUzB,GAArB;AACD,CAZD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgD,OAAT,CAAiBN,KAAjB,EAAwB3B,OAAxB,EAAiC;AAC/B,QAAMmD,QAAQ,GAAG,IAAIpD,OAAJ,CAAYC,OAAZ,CAAjB;AAEAmD,EAAAA,QAAQ,CAAC7B,IAAT,CAAcK,KAAd,EAH+B,CAK/B;;AACA,MAAIwB,QAAQ,CAAC5C,GAAb,EAAkB,MAAM4C,QAAQ,CAAClE,GAAT,IAAgBA,GAAG,CAACkE,QAAQ,CAAC5C,GAAV,CAAzB;AAElB,SAAO4C,QAAQ,CAACH,MAAhB;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,UAAT,CAAoBzB,KAApB,EAA2B3B,OAA3B,EAAoC;AAClCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACM,GAAR,GAAc,IAAd;AACA,SAAO2B,OAAO,CAACN,KAAD,EAAQ3B,OAAR,CAAd;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAqD,MAAM,CAACC,OAAP,CAAevD,OAAf,GAAyBA,OAAzB;AACAsD,MAAM,CAACC,OAAP,CAAerB,OAAf,GAAyBA,OAAzB;AACAoB,MAAM,CAACC,OAAP,CAAeF,UAAf,GAA4BA,UAA5B;AACAC,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBtB,OAAxB;AACAoB,MAAM,CAACC,OAAP,CAAeE,SAAf,GAA2B1E,OAAO,CAAC,kBAAD,CAAlC","sourcesContent":["'use strict';\n\n\nconst zlib_inflate = require('./zlib/inflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\nconst GZheader     = require('./zlib/gzheader');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = require('./zlib/constants');\n"]},"metadata":{},"sourceType":"script"}