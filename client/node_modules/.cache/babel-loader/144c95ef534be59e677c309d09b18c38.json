{"ast":null,"code":"'use strict';\n\nconst opentype = require('opentype.js');\n\nmodule.exports = class FontSubset {\n  constructor(font) {\n    this.font = font;\n    this.name = 'PDFJS+' + this.font.names.fontFamily.en;\n    this.glyphs = {\n      '0': this.font.charToGlyph(String.fromCharCode(0)),\n      // notDef glyph\n      '32': this.font.charToGlyph(String.fromCharCode(32)) // space\n\n    };\n    this.subset = {\n      '0': 0,\n      '32': 32\n    };\n    this.mapping = {\n      '0': 0,\n      '32': 32\n    };\n    this.pos = 33;\n  }\n\n  use(chars) {\n    for (let i = 0, len = chars.length; i < len; ++i) {\n      const code = chars.charCodeAt(i);\n\n      if (code in this.mapping || code < 33) {\n        continue;\n      }\n\n      const glyph = this.font.charToGlyph(chars[i]);\n      this.subset[this.pos] = code;\n      this.mapping[code] = this.pos;\n      this.glyphs[this.pos] = glyph;\n      this.pos++;\n    }\n  }\n\n  encode(str) {\n    const codes = [];\n\n    for (let i = 0, len = str.length; i < len; ++i) {\n      codes.push(this.mapping[str.charCodeAt(i)]);\n    }\n\n    return String.fromCharCode.apply(String, codes);\n  }\n\n  cmap() {\n    return this.subset;\n  }\n\n  save() {\n    const glyphs = [];\n\n    for (const pos in this.glyphs) {\n      glyphs.push(this.glyphs[pos]);\n    }\n\n    const font = new opentype.Font({\n      familyName: this.name,\n      styleName: this.font.names.fontSubfamily.en,\n      unitsPerEm: this.font.unitsPerEm,\n      ascender: this.font.ascender,\n      descender: this.font.descender,\n      glyphs: glyphs\n    });\n    return font.toArrayBuffer();\n  }\n\n};","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/lib/font/subset.js"],"names":["opentype","require","module","exports","FontSubset","constructor","font","name","names","fontFamily","en","glyphs","charToGlyph","String","fromCharCode","subset","mapping","pos","use","chars","i","len","length","code","charCodeAt","glyph","encode","str","codes","push","apply","cmap","save","Font","familyName","styleName","fontSubfamily","unitsPerEm","ascender","descender","toArrayBuffer"],"mappings":"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","sourcesContent":["'use strict'\n\nconst opentype = require('opentype.js')\n\nmodule.exports = class FontSubset {\n  constructor(font) {\n    this.font = font\n    this.name = 'PDFJS+' + this.font.names.fontFamily.en\n\n    this.glyphs = {\n      '0':  this.font.charToGlyph(String.fromCharCode(0)), // notDef glyph\n      '32': this.font.charToGlyph(String.fromCharCode(32)), // space\n    }\n    this.subset  = { '0': 0, '32': 32 }\n    this.mapping = { '0': 0, '32': 32 }\n    this.pos     = 33\n  }\n\n  use(chars) {\n    for (let i = 0, len = chars.length; i < len; ++i) {\n      const code = chars.charCodeAt(i)\n      if (code in this.mapping || code < 33) {\n        continue\n      }\n\n      const glyph = this.font.charToGlyph(chars[i])\n\n      this.subset[this.pos] = code\n      this.mapping[code]    = this.pos\n      this.glyphs[this.pos] = glyph\n\n      this.pos++\n    }\n  }\n\n  encode(str) {\n    const codes = []\n    for (let i = 0, len = str.length; i < len; ++i) {\n      codes.push(this.mapping[str.charCodeAt(i)])\n    }\n    return String.fromCharCode.apply(String, codes)\n  }\n\n  cmap() {\n    return this.subset\n  }\n\n  save() {\n    const glyphs = []\n    for (const pos in this.glyphs) {\n      glyphs.push(this.glyphs[pos])\n    }\n    const font = new opentype.Font({\n      familyName: this.name,\n      styleName:  this.font.names.fontSubfamily.en,\n      unitsPerEm: this.font.unitsPerEm,\n      ascender:   this.font.ascender,\n      descender:  this.font.descender,\n      glyphs:     glyphs\n    })\n    return font.toArrayBuffer()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}