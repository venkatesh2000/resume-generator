{"ast":null,"code":"'use strict';\n\nconst PDFName = require('./name');\n\nconst PDFValue = require('./value');\n\nclass PDFDictionary {\n  constructor(dictionary) {\n    this.dictionary = {};\n\n    if (dictionary) {\n      for (const key in dictionary) {\n        this.add(key, dictionary[key]);\n      }\n    }\n  }\n\n  add(key, val) {\n    if (typeof val === 'string') {\n      val = new PDFName(val);\n    }\n\n    this.dictionary[new PDFName(key)] = val;\n  }\n\n  set(key, val) {\n    this.add(key, val);\n  }\n\n  has(key) {\n    return String(new PDFName(key)) in this.dictionary;\n  }\n\n  get(key) {\n    return this.dictionary[new PDFName(key)];\n  }\n\n  del(key) {\n    delete this.dictionary[new PDFName(key)];\n  }\n\n  get length() {\n    let length = 0;\n\n    for (const key in this.dictionary) {\n      length++;\n    }\n\n    return length;\n  }\n\n  toString() {\n    let str = '';\n\n    for (const key in this.dictionary) {\n      const val = this.dictionary[key];\n      str += `${key} ${val === null ? 'null' : val}`.replace(/^/gm, '\\t') + '\\n';\n    }\n\n    return `<<\\n${str}>>`;\n  }\n\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(2) !== '<<') {\n      if (trial) {\n        return undefined;\n      }\n\n      throw new Error('Invalid dictionary');\n    }\n\n    lexer.shift(2);\n    lexer.skipWhitespace(null, true);\n    const dictionary = new PDFDictionary();\n\n    while (lexer.getString(2) !== '>>') {\n      const key = PDFName.parse(xref, lexer);\n      lexer.skipWhitespace(null, true);\n      const value = PDFValue.parse(xref, lexer);\n      dictionary.set(key, value);\n      lexer.skipWhitespace(null, true);\n    }\n\n    lexer.shift(2);\n    return dictionary;\n  }\n\n}\n\nmodule.exports = PDFDictionary;","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/lib/object/dictionary.js"],"names":["PDFName","require","PDFValue","PDFDictionary","constructor","dictionary","key","add","val","set","has","String","get","del","length","toString","str","replace","parse","xref","lexer","trial","getString","undefined","Error","shift","skipWhitespace","value","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst PDFName = require('./name')\nconst PDFValue = require('./value')\n\nclass PDFDictionary {\n  constructor(dictionary) {\n    this.dictionary = {}\n    if (dictionary) {\n      for (const key in dictionary) {\n        this.add(key, dictionary[key])\n      }\n    }\n  }\n\n  add(key, val) {\n    if (typeof val === 'string') {\n      val = new PDFName(val)\n    }\n    this.dictionary[new PDFName(key)] = val\n  }\n\n  set(key, val) {\n    this.add(key, val)\n  }\n\n  has(key) {\n    return String(new PDFName(key)) in this.dictionary\n  }\n\n  get(key) {\n    return this.dictionary[new PDFName(key)]\n  }\n\n  del(key) {\n    delete this.dictionary[new PDFName(key)]\n  }\n\n  get length() {\n    let length = 0\n    for (const key in this.dictionary) {\n      length++\n    }\n    return length\n  }\n\n  toString() {\n    let str = ''\n    for (const key in this.dictionary) {\n      const val = this.dictionary[key]\n      str += `${key} ${val === null ? 'null' : val}`.replace(/^/gm, '\\t') + '\\n'\n    }\n    return `<<\\n${str}>>`\n  }\n\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(2) !== '<<') {\n      if (trial) {\n        return undefined\n      }\n\n      throw new Error('Invalid dictionary')\n    }\n\n    lexer.shift(2)\n    lexer.skipWhitespace(null, true)\n\n    const dictionary = new PDFDictionary()\n\n    while (lexer.getString(2) !== '>>') {\n      const key = PDFName.parse(xref, lexer)\n      lexer.skipWhitespace(null, true)\n\n      const value = PDFValue.parse(xref, lexer)\n      dictionary.set(key, value)\n\n      lexer.skipWhitespace(null, true)\n    }\n\n    lexer.shift(2)\n\n    return dictionary\n  }\n}\n\nmodule.exports = PDFDictionary\n"]},"metadata":{},"sourceType":"script"}