{"ast":null,"code":"'use strict'; // Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n// Use ordinary array, since untyped makes no boost here\n\nconst makeTable = () => {\n  let c,\n      table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n\n    for (var k = 0; k < 8; k++) {\n      c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;\n    }\n\n    table[n] = c;\n  }\n\n  return table;\n}; // Create table on load. Just 255 signed longs. Not a problem.\n\n\nconst crcTable = new Uint32Array(makeTable());\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return crc ^ -1; // >>> 0;\n};\n\nmodule.exports = crc32;","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/node_modules/pako/lib/zlib/crc32.js"],"names":["makeTable","c","table","n","k","crcTable","Uint32Array","crc32","crc","buf","len","pos","t","end","i","module","exports"],"mappings":"AAAA,a,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMA,SAAS,GAAG,MAAM;AACtB,MAAIC,CAAJ;AAAA,MAAOC,KAAK,GAAG,EAAf;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BF,IAAAA,CAAC,GAAGE,CAAJ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BH,MAAAA,CAAC,GAAKA,CAAC,GAAG,CAAL,GAAW,aAAcA,CAAC,KAAK,CAA/B,GAAsCA,CAAC,KAAK,CAAjD;AACD;;AACDC,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWF,CAAX;AACD;;AAED,SAAOC,KAAP;AACD,CAZD,C,CAcA;;;AACA,MAAMG,QAAQ,GAAG,IAAIC,WAAJ,CAAgBN,SAAS,EAAzB,CAAjB;;AAGA,MAAMO,KAAK,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,KAAwB;AACpC,QAAMC,CAAC,GAAGP,QAAV;AACA,QAAMQ,GAAG,GAAGF,GAAG,GAAGD,GAAlB;AAEAF,EAAAA,GAAG,IAAI,CAAC,CAAR;;AAEA,OAAK,IAAIM,CAAC,GAAGH,GAAb,EAAkBG,CAAC,GAAGD,GAAtB,EAA2BC,CAAC,EAA5B,EAAgC;AAC9BN,IAAAA,GAAG,GAAIA,GAAG,KAAK,CAAT,GAAcI,CAAC,CAAC,CAACJ,GAAG,GAAGC,GAAG,CAACK,CAAD,CAAV,IAAiB,IAAlB,CAArB;AACD;;AAED,SAAQN,GAAG,GAAI,CAAC,CAAhB,CAVoC,CAUf;AACtB,CAXD;;AAcAO,MAAM,CAACC,OAAP,GAAiBT,KAAjB","sourcesContent":["'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nmodule.exports = crc32;\n"]},"metadata":{},"sourceType":"script"}