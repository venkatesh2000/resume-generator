{"ast":null,"code":"'use strict';\n\nconst PDFName = require('./name');\n\nconst PDFString = require('./string');\n\nconst PDFDictionary = require('./dictionary');\n\nconst PDFArray = require('./array');\n\nclass PDFNameTree extends PDFDictionary {\n  constructor(dictionary) {\n    super(dictionary);\n  }\n\n  add(key, val) {\n    if (typeof val === 'string') {\n      val = new PDFName(val);\n    }\n\n    this.dictionary[key] = val;\n  }\n\n  has(key) {\n    return String(key) in this.dictionary;\n  }\n\n  get(key) {\n    return this.dictionary[key];\n  }\n\n  del(key) {\n    delete this.dictionary[key];\n  }\n\n  toString() {\n    const sortedKeys = Object.keys(this.dictionary);\n    sortedKeys.sort((lhs, rhs) => lhs.localeCompare(rhs));\n    const names = [];\n\n    for (const key of sortedKeys) {\n      names.push(new PDFString(key), this.dictionary[key]);\n    }\n\n    const dict = new PDFDictionary();\n    dict.set(\"Names\", new PDFArray(names));\n    dict.set(\"Limits\", new PDFArray([new PDFString(sortedKeys[0]), new PDFString(sortedKeys[sortedKeys.length - 1])]));\n    return dict.toString();\n  }\n\n}\n\nmodule.exports = PDFNameTree;","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/lib/object/nametree.js"],"names":["PDFName","require","PDFString","PDFDictionary","PDFArray","PDFNameTree","constructor","dictionary","add","key","val","has","String","get","del","toString","sortedKeys","Object","keys","sort","lhs","rhs","localeCompare","names","push","dict","set","length","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,QAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,UAAD,CAAzB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,cAAD,CAA7B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,SAAD,CAAxB;;AAEA,MAAMI,WAAN,SAA0BF,aAA1B,CAAwC;AACtCG,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB,UAAMA,UAAN;AACD;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAW;AACZ,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,MAAAA,GAAG,GAAG,IAAIV,OAAJ,CAAYU,GAAZ,CAAN;AACD;;AACD,SAAKH,UAAL,CAAgBE,GAAhB,IAAuBC,GAAvB;AACD;;AAEDC,EAAAA,GAAG,CAACF,GAAD,EAAM;AACP,WAAOG,MAAM,CAACH,GAAD,CAAN,IAAe,KAAKF,UAA3B;AACD;;AAEDM,EAAAA,GAAG,CAACJ,GAAD,EAAM;AACP,WAAO,KAAKF,UAAL,CAAgBE,GAAhB,CAAP;AACD;;AAEDK,EAAAA,GAAG,CAACL,GAAD,EAAM;AACP,WAAO,KAAKF,UAAL,CAAgBE,GAAhB,CAAP;AACD;;AAEDM,EAAAA,QAAQ,GAAG;AACT,UAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKX,UAAjB,CAAnB;AACAS,IAAAA,UAAU,CAACG,IAAX,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,aAAJ,CAAkBD,GAAlB,CAA9B;AAEA,UAAME,KAAK,GAAG,EAAd;;AACA,SAAK,MAAMd,GAAX,IAAkBO,UAAlB,EAA8B;AAC5BO,MAAAA,KAAK,CAACC,IAAN,CAAW,IAAItB,SAAJ,CAAcO,GAAd,CAAX,EAA+B,KAAKF,UAAL,CAAgBE,GAAhB,CAA/B;AACD;;AAED,UAAMgB,IAAI,GAAG,IAAItB,aAAJ,EAAb;AACAsB,IAAAA,IAAI,CAACC,GAAL,CAAS,OAAT,EAAkB,IAAItB,QAAJ,CAAamB,KAAb,CAAlB;AACAE,IAAAA,IAAI,CAACC,GAAL,CAAS,QAAT,EAAmB,IAAItB,QAAJ,CAAa,CAC9B,IAAIF,SAAJ,CAAcc,UAAU,CAAC,CAAD,CAAxB,CAD8B,EAE9B,IAAId,SAAJ,CAAcc,UAAU,CAACA,UAAU,CAACW,MAAX,GAAoB,CAArB,CAAxB,CAF8B,CAAb,CAAnB;AAIA,WAAOF,IAAI,CAACV,QAAL,EAAP;AACD;;AAxCqC;;AA2CxCa,MAAM,CAACC,OAAP,GAAiBxB,WAAjB","sourcesContent":["'use strict'\n\nconst PDFName = require('./name')\nconst PDFString = require('./string')\nconst PDFDictionary = require('./dictionary')\nconst PDFArray = require('./array')\n\nclass PDFNameTree extends PDFDictionary {\n  constructor(dictionary) {\n    super(dictionary)\n  }\n\n  add(key, val) {\n    if (typeof val === 'string') {\n      val = new PDFName(val)\n    }\n    this.dictionary[key] = val\n  }\n\n  has(key) {\n    return String(key) in this.dictionary\n  }\n\n  get(key) {\n    return this.dictionary[key]\n  }\n\n  del(key) {\n    delete this.dictionary[key]\n  }\n\n  toString() {\n    const sortedKeys = Object.keys(this.dictionary)\n    sortedKeys.sort((lhs, rhs) => lhs.localeCompare(rhs))\n\n    const names = []\n    for (const key of sortedKeys) {\n      names.push(new PDFString(key), this.dictionary[key])\n    }\n\n    const dict = new PDFDictionary()\n    dict.set(\"Names\", new PDFArray(names))\n    dict.set(\"Limits\", new PDFArray([\n      new PDFString(sortedKeys[0]),\n      new PDFString(sortedKeys[sortedKeys.length - 1]),\n    ]))\n    return dict.toString()\n  }\n}\n\nmodule.exports = PDFNameTree\n"]},"metadata":{},"sourceType":"script"}