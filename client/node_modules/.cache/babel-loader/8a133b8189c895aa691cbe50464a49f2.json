{"ast":null,"code":"'use strict';\n\nconst PDF = require('../object');\n\nmodule.exports = class JPEGImage {\n  constructor(src) {\n    this.src = src;\n    this.xobjCount = 1;\n    const view = new DataView(src);\n\n    if (view.getUint8(0) !== 0xff || view.getUint8(1) !== 0xd8) {\n      throw new Error('Invalid JPEG image.');\n    }\n\n    let blockLength = view.getUint8(4) * 256 + view.getUint8(5);\n    const len = view.byteLength;\n    let i = 4;\n\n    while (i < len) {\n      i += blockLength;\n\n      if (view.getUint8(i) !== 0xff) {\n        throw new Error('Could not read JPEG the image size');\n      }\n\n      if (view.getUint8(i + 1) === 0xc0 || //(SOF) Huffman  - Baseline DCT\n      view.getUint8(i + 1) === 0xc1 || //(SOF) Huffman  - Extended sequential DCT\n      view.getUint8(i + 1) === 0xc2 || // Progressive DCT (SOF2)\n      view.getUint8(i + 1) === 0xc3 || // Spatial (sequential) lossless (SOF3)\n      view.getUint8(i + 1) === 0xc4 || // Differential sequential DCT (SOF5)\n      view.getUint8(i + 1) === 0xc5 || // Differential progressive DCT (SOF6)\n      view.getUint8(i + 1) === 0xc6 || // Differential spatial (SOF7)\n      view.getUint8(i + 1) === 0xc7) {\n        this.height = view.getUint8(i + 5) * 256 + view.getUint8(i + 6);\n        this.width = view.getUint8(i + 7) * 256 + view.getUint8(i + 8);\n        const colorSpace = view.getUint8(i + 9);\n\n        switch (colorSpace) {\n          case 3:\n            this.colorSpace = 'DeviceRGB';\n            break;\n\n          case 1:\n            this.colorSpace = 'DeviceGray';\n            break;\n        }\n\n        break;\n      } else {\n        i += 2;\n        blockLength = view.getUint8(i) * 256 + view.getUint8(i + 1);\n      }\n    }\n  }\n\n  async write(doc, xobjs) {\n    const xobj = xobjs[0];\n    xobj.prop('Subtype', 'Image');\n    xobj.prop('Width', this.width);\n    xobj.prop('Height', this.height);\n    xobj.prop('ColorSpace', this.colorSpace);\n    xobj.prop('BitsPerComponent', 8);\n    const hex = asHex(this.src);\n    xobj.prop('Filter', new PDF.Array(['/ASCIIHexDecode', '/DCTDecode']));\n    xobj.prop('Length', hex.length + 1);\n    xobj.prop('Length1', this.src.byteLength);\n    const content = new PDF.Stream(xobj);\n    content.content = hex + '>\\n';\n    await doc._writeObject(xobj);\n  }\n\n};\n\nfunction asHex(ab) {\n  const view = new Uint8Array(ab);\n  let hex = '';\n\n  for (let i = 0, len = ab.byteLength; i < len; ++i) {\n    hex += toHex(view[i]);\n  }\n\n  return hex;\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}","map":{"version":3,"sources":["/mnt/c/Users/Venkatesh/Documents/6th Sem/Web Dev/project/resume-generator/node_modules/pdfjs/lib/image/jpeg.js"],"names":["PDF","require","module","exports","JPEGImage","constructor","src","xobjCount","view","DataView","getUint8","Error","blockLength","len","byteLength","i","height","width","colorSpace","write","doc","xobjs","xobj","prop","hex","asHex","Array","length","content","Stream","_writeObject","ab","Uint8Array","toHex","n","toString"],"mappings":"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","sourcesContent":["'use strict'\n\nconst PDF = require('../object')\n\nmodule.exports = class JPEGImage {\n  constructor(src) {\n    this.src = src\n    this.xobjCount = 1\n\n    const view = new DataView(src)\n    if (view.getUint8(0) !== 0xff || view.getUint8(1) !== 0xd8) {\n      throw new Error('Invalid JPEG image.')\n    }\n\n    let blockLength = view.getUint8(4) * 256 + view.getUint8(5)\n    const len = view.byteLength\n    let i = 4\n\n    while ( i < len ) {\n      i += blockLength\n\n      if (view.getUint8(i) !== 0xff) {\n        throw new Error('Could not read JPEG the image size')\n      }\n\n      if (\n        view.getUint8(i + 1) === 0xc0 || //(SOF) Huffman  - Baseline DCT\n        view.getUint8(i + 1) === 0xc1 || //(SOF) Huffman  - Extended sequential DCT\n        view.getUint8(i + 1) === 0xc2 || // Progressive DCT (SOF2)\n        view.getUint8(i + 1) === 0xc3 || // Spatial (sequential) lossless (SOF3)\n        view.getUint8(i + 1) === 0xc4 || // Differential sequential DCT (SOF5)\n        view.getUint8(i + 1) === 0xc5 || // Differential progressive DCT (SOF6)\n        view.getUint8(i + 1) === 0xc6 || // Differential spatial (SOF7)\n        view.getUint8(i + 1) === 0xc7\n      ) {\n        this.height = view.getUint8(i + 5) * 256 + view.getUint8(i + 6)\n        this.width = view.getUint8(i + 7) * 256 + view.getUint8(i + 8)\n\n        const colorSpace = view.getUint8(i + 9)\n        switch (colorSpace) {\n        case 3:\n          this.colorSpace = 'DeviceRGB'\n          break\n        case 1:\n          this.colorSpace = 'DeviceGray'\n          break\n        }\n\n        break\n      } else {\n        i += 2\n        blockLength = view.getUint8(i) * 256 + view.getUint8(i + 1)\n      }\n    }\n  }\n\n  async write(doc, xobjs) {\n    const xobj = xobjs[0]\n\n    xobj.prop('Subtype', 'Image')\n    xobj.prop('Width',  this.width)\n    xobj.prop('Height', this.height)\n    xobj.prop('ColorSpace', this.colorSpace)\n    xobj.prop('BitsPerComponent', 8)\n\n    const hex = asHex(this.src)\n    xobj.prop('Filter', new PDF.Array(['/ASCIIHexDecode', '/DCTDecode']))\n    xobj.prop('Length', hex.length + 1)\n    xobj.prop('Length1', this.src.byteLength)\n\n    const content = new PDF.Stream(xobj)\n    content.content = hex + '>\\n'\n\n    await doc._writeObject(xobj)\n  }\n}\n\nfunction asHex(ab) {\n  const view = new Uint8Array(ab)\n  let hex = ''\n  for (let i = 0, len = ab.byteLength; i < len; ++i) {\n    hex += toHex(view[i])\n  }\n  return hex\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}"]},"metadata":{},"sourceType":"script"}